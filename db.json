{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1537279340936},{"_id":"source/CNAME","hash":"34ce0f5ec60729fa05b7f7e8caef56d4c55073c0","modified":1537291941078},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1537279340936},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1537279340936},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1537279340940},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1537279340940},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1537279340940},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1537279340937},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1537279340940},{"_id":"themes/next/bower.json","hash":"5391684ba84fe633bc7877ab711a7d8a0072ceda","modified":1537279340941},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1537279340942},{"_id":"themes/next/README.md","hash":"c1d6d1c6b75736b892e179865833ea58da5ca9d2","modified":1537279340940},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1537279340951},{"_id":"themes/next/_config.yml","hash":"99e929258e23e37d3247b49af4786a5875c15508","modified":1537279340941},{"_id":"themes/next/package.json","hash":"9acf6b8c8194f8a366025c8aab64d236908e62a1","modified":1537279340987},{"_id":"source/_posts/hello-world.md","hash":"5ec48fc90c56c329d7ae34466958b2868865a1c5","modified":1537280060052},{"_id":"source/_posts/Swagger-入坑.md","hash":"4ca65c9e3f03514b6ebd4db2e77a90504192048c","modified":1537283517378},{"_id":"source/_posts/golang中特殊字符的json序列化.md","hash":"1f5b672dcb556e62f2eefd476b04c92a708e8cb5","modified":1537292450161},{"_id":"source/_posts/Go语言的栈和指针机制.md","hash":"f1e32f9abfd8027f234ea4b851ab267bf5b0f55e","modified":1537320805005},{"_id":"source/_posts/我是如何开始参与开源项目的.md","hash":"4a6ff300b5bff3e1b042e23ce519b35fc0aaeda2","modified":1537279959671},{"_id":"source/_posts/记一次死锁.md","hash":"f4851f0f93351cbc1bc5bb206bf79f03b8292233","modified":1537282516514},{"_id":"themes/next/.git/config","hash":"e2ca9fa6f115d4406d24bf0df53fc26ce13e0c9b","modified":1537279340928},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1537279340925},{"_id":"themes/next/.git/index","hash":"0f6cf9ec02c7107516398e759e1ab57ba1d69779","modified":1537282924624},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1537279306246},{"_id":"themes/next/.git/packed-refs","hash":"191c8a438a37cbdd4909e1be49d7b4cddb341777","modified":1537279340922},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1537279340939},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1537279340938},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"b63696d41f022525e40d7e7870c3785b6bc7536b","modified":1537279340937},{"_id":"themes/next/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1537279340939},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"a5335a99377069ae76fd993d488bc3eaf48f3a05","modified":1537279340937},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1537279340939},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1537279340944},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1537279340943},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1537279340943},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1537279340942},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1537279340944},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"120750c03ec30ccaa470b113bbe39f3d423c67f0","modified":1537279340944},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1537279340944},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1537279340946},{"_id":"themes/next/docs/MATH.md","hash":"0ae4258950de01a457ea8123a8d13ec6db496e53","modified":1537279340945},{"_id":"themes/next/languages/de.yml","hash":"fb478c5040a4e58a4c1ad5fb52a91e5983d65a3a","modified":1537279340951},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1537279340952},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1537279340952},{"_id":"themes/next/languages/it.yml","hash":"62ef41d0a9a3816939cb4d93a524e6930ab9c517","modified":1537279340953},{"_id":"themes/next/languages/id.yml","hash":"e7fb582e117a0785036dcdbb853a6551263d6aa6","modified":1537279340953},{"_id":"themes/next/languages/fr.yml","hash":"0162a85ae4175e66882a9ead1249fedb89200467","modified":1537279340952},{"_id":"themes/next/languages/nl.yml","hash":"bb9ce8adfa5ee94bc6b5fac6ad24ba4605d180d3","modified":1537279340955},{"_id":"themes/next/languages/ja.yml","hash":"e331b15b1fda0f2285d25853f834682ab8dc3c39","modified":1537279340954},{"_id":"themes/next/languages/ko.yml","hash":"fae155018ae0efdf68669b2c7dd3f959c2e45cc9","modified":1537279340954},{"_id":"themes/next/languages/pt.yml","hash":"3cb51937d13ff12fcce747f972ccb664840a9ef3","modified":1537279340955},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1537279340956},{"_id":"themes/next/languages/pt-BR.yml","hash":"bfc80c8a363fa2e8dde38ea2bc85cd19e15ab653","modified":1537279340955},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1537279340956},{"_id":"themes/next/languages/vi.yml","hash":"8da921dd8335dd676efce31bf75fdd4af7ce6448","modified":1537279340957},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1537279340957},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1537279340957},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1537279340957},{"_id":"themes/next/layout/_layout.swig","hash":"1b59036ccb2ad571503b94587f458fad46775642","modified":1537279340959},{"_id":"themes/next/layout/archive.swig","hash":"2b6450c6b6d2bcbcd123ad9f59922a5e323d77a5","modified":1537279340985},{"_id":"themes/next/layout/category.swig","hash":"5d955284a42f802a48560b4452c80906a5d1da02","modified":1537279340986},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1537279340986},{"_id":"themes/next/layout/page.swig","hash":"79040bae5ec14291441b33eea341a24a7c0e9f93","modified":1537279340986},{"_id":"themes/next/layout/schedule.swig","hash":"3e9cba5313bf3b98a38ccb6ef78b56ffa11d66ee","modified":1537279340987},{"_id":"themes/next/layout/post.swig","hash":"318249db246a57e9422875a2457c6acfce974ba5","modified":1537279340986},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1537279340988},{"_id":"themes/next/scripts/helpers.js","hash":"a70bfad3efda76738dab12e28e8b75e3989ee3da","modified":1537279340988},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1537279340988},{"_id":"themes/next/layout/tag.swig","hash":"ba402ce8fd55e80b240e019e8d8c48949b194373","modified":1537279340987},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1537279341054},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1537279341054},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1537279341054},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537279341030},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1537279306249},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1537279306250},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1537279306247},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1537279306250},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1537279306249},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1537279306250},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1537279306248},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1537279306245},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1537279306249},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1537279306247},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1537279306250},{"_id":"themes/next/.git/logs/HEAD","hash":"11f81d27112e2c4008200d901aa591f54fcb2e69","modified":1537279340927},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1537279340946},{"_id":"themes/next/docs/ru/README.md","hash":"edfe0cfb8b2c9f0effd3beb868af9bfd0fabb3a6","modified":1537279340947},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1537279340946},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1537279340947},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1537279340947},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1537279340948},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1537279340949},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"bd2c955d9b7b1b45bd74a4536717d547e03fcde3","modified":1537279340948},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1537279340949},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"24cf2618d164440b047bb9396263de83bee5b993","modified":1537279340949},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1537279340950},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"e03607b608db4aa7d46f6726827c51ac16623339","modified":1537279340950},{"_id":"themes/next/docs/zh-CN/README.md","hash":"46b264623af21211a0a9c4ba0cf1318a80eeb9fb","modified":1537279340950},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1537279340958},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1537279340958},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1537279340958},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1537279340960},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"0790ddbc349508d7ece45a9a4391d0a1cd7263cc","modified":1537279340960},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1537279340960},{"_id":"themes/next/layout/_macro/reward.swig","hash":"bd5778d509c51f4b1d8da3a2bc35462929f08c75","modified":1537279340961},{"_id":"themes/next/layout/_macro/post.swig","hash":"27922af64ecb9db9a28bcf1c98fb68b26bf0b67a","modified":1537279340961},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1f3121ef66a4698fd78f34bf2594ef79a407c92c","modified":1537279340961},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"a9e1346b83cf99e06bed59a53fc069279751e52a","modified":1537279340962},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1537279340963},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1537279340966},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1537279340967},{"_id":"themes/next/layout/_partials/footer.swig","hash":"05cdaf9b6cb32afd442b228cd247aaf9468a31ed","modified":1537279340963},{"_id":"themes/next/layout/_partials/comments.swig","hash":"eafff2d623af8991844f34819a60e37ac11ef245","modified":1537279340963},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"6fc63d5da49cb6157b8792f39c7305b55a0d1593","modified":1537279340971},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"0a0129e926c27fffc6e7ef87fe370016bc7a4564","modified":1537279340971},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1537279340973},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1537279340972},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"a8ab2035654dd06d94faf11a35750529e922d719","modified":1537279340979},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"f532ce257fca6108e84b8f35329c53f272c2ce84","modified":1537279340980},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1537279340980},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1537279340977},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1537279340982},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1537279340982},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1537279340981},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"b0ca46e0d1ff4c08cb0a3a8c1994f20d0260cef9","modified":1537279340982},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1537279340982},{"_id":"themes/next/scripts/tags/button.js","hash":"4b12c376bea894d23cca0f9fcb3d6518b6db279d","modified":1537279340989},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1537279340989},{"_id":"themes/next/scripts/tags/exturl.js","hash":"1412ce2ef59fa4137b697a507fd759ff067a2398","modified":1537279340990},{"_id":"themes/next/scripts/tags/full-image.js","hash":"e282bf5a7c70b3d354001e8f66d3bef1a4fbb79e","modified":1537279340990},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"981e01aaf45a1f0f23ce0796d03134f9e437aaca","modified":1537279340990},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1537279340990},{"_id":"themes/next/scripts/tags/label.js","hash":"f0ecd3b5773b19a6bd93a819dfe0c49ee418e4de","modified":1537279340991},{"_id":"themes/next/scripts/tags/note.js","hash":"adb945ba93ac487d46b969ca4e59d3681b8f8d1c","modified":1537279340991},{"_id":"themes/next/scripts/tags/tabs.js","hash":"e37761253d68a29593fe9ed2fe403f49b6e971de","modified":1537279340991},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1537279341030},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1537279341032},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1537279341031},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1537279341033},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1537279341034},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1537279341034},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1537279341034},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1537279341033},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1537279341034},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1537279341035},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1537279341036},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1537279341035},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1537279341035},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1537279341036},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1537279341036},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1537279341037},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1537279341037},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1537279341037},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1537279341037},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537279340972},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537279340973},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537279341017},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537279341017},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537279341018},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537279341028},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537279341030},{"_id":"themes/next/.git/refs/heads/master","hash":"bea98a5acf88a490c662517a92a46bdea1ba16ea","modified":1537279340926},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"d1b73c926109145e52605929b75914cc8b60fb89","modified":1537279340959},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1537279340959},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1537279340964},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"a7e376b087ae77f2e2a61ba6af81cde5af693174","modified":1537279340965},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"fd780171713aada5eb4f4ffed8e714617c8ae6be","modified":1537279340965},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"88b4b6051592d26bff59788acb76346ce4e398c2","modified":1537279340966},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1537279340966},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"3db735d0cd2d449edf2674310ac1e7c0043cb357","modified":1537279340966},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"00bf33b3c557b8f7e9faf49b226ea6ff7df5cda0","modified":1537279340965},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1537279340968},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1537279340969},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1537279340968},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1537279340969},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1537279340970},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1537279340970},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1537279340970},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cc865af4a3cb6d25a0be171b7fc919ade306bb50","modified":1537279340972},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1537279340972},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1537279340973},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1537279340973},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1537279340974},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1537279340974},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"07307f1f0e0e9858f2c7143cbdfcb2a9a92149ab","modified":1537279340974},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1537279340974},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1537279340975},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1537279340975},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1537279340976},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1537279340976},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1537279340977},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1537279340977},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1537279340977},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1537279340978},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c28f3f4aa31d7f996d26a97df6cd7ffa9bfd2cec","modified":1537279340976},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"03ef008bc95e8e83232e5464a6c63d6157d33a5e","modified":1537279340978},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"2c74a96dd314e804d801f8773ac1b2e0a970fce3","modified":1537279340979},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1537279340978},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"03e83f1311faafb7dddc2899042ed1cacd5c995e","modified":1537279340979},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"34421679cae6581697cd3ab7c3729eb220e3e3f5","modified":1537279340979},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1537279340981},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1537279340981},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"9b9ff4cc6d5474ab03f09835a2be80e0dba9fe89","modified":1537279340981},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1537279340983},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1537279340984},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1537279340985},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1537279340984},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1537279341017},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1537279341017},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"51c2907e5c50c2614419b670fbdec183ae7f7f5d","modified":1537279341018},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1537279341028},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e1f6f59ad6e562dfe640ee4ed5d1ac9b6aba4114","modified":1537279341028},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1537279341017},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c167eeb6b736f7b021fba98c38c2c21032ee1255","modified":1537279341029},{"_id":"themes/next/source/css/_variables/base.styl","hash":"0b43ddd92e395342703550f629699c5e591fd68b","modified":1537279341029},{"_id":"themes/next/source/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1537279341038},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1537279341039},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1537279341038},{"_id":"themes/next/source/js/src/motion.js","hash":"b45d2c0d48f2c8e6a0621b8063845f76b89476cc","modified":1537279341039},{"_id":"themes/next/source/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1537279341040},{"_id":"themes/next/source/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1537279341039},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1537279341039},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1537279341040},{"_id":"themes/next/source/js/src/utils.js","hash":"e829806d054991d0324a339993082206ca6026e5","modified":1537279341041},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1537279341041},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1537279341042},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1537279341042},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1537279341042},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1537279341043},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1537279341043},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1537279341053},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1537279341052},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1537279341053},{"_id":"themes/next/.git/objects/pack/pack-05adec4d1913c542e3d48323ce2270bd7f35f997.idx","hash":"00a57a9a79f539b5b4264b81a43c7cc75813330d","modified":1537279340900},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1537279341049},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"11f81d27112e2c4008200d901aa591f54fcb2e69","modified":1537279340927},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1537279340925},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1537279340983},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6958a97fde63e03983ec2394a4f8e408860fb42b","modified":1537279340983},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1537279340992},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1537279340992},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1537279340993},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1537279340992},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1537279340993},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1537279340998},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1537279341008},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"aebbd86500d819c4532ab290c62b6f432bc2f878","modified":1537279341014},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"18309b68ff33163a6f76a39437e618bb6ed411f8","modified":1537279341015},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1537279341016},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"efc40a32487e0ac7b94b1ca81bdbdcc4ec8f2924","modified":1537279341015},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1537279341015},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1537279341016},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"0810e7c43d6c8adc8434a8fa66eabe0436ab8178","modified":1537279341016},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1537279341019},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1537279341019},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1537279341020},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f43c821ea272f80703862260b140932fe4aa0e1f","modified":1537279341020},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"2212511ae14258d93bec57993c0385e5ffbb382b","modified":1537279341020},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1537279341021},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1537279341022},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1537279341020},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"fca5320e2644edcd663888863899d1b80352439b","modified":1537279341019},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1537279341023},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1537279341023},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1537279341023},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1537279341024},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"876b5d99061025cf485a3cac440624ded5734319","modified":1537279341025},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1537279341025},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1537279341027},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1537279341026},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"41f9cdafa00e256561c50ae0b97ab7fcd7c1d6a2","modified":1537279341027},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"ffa870c3fa37a48b01dc6f967e66f5df508d02bf","modified":1537279341027},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1537279341027},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"86c9976f517da4574495372da33e03b95b2a5d52","modified":1537279341040},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1537279341043},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1537279341049},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1537279341049},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1537279341044},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1537279341044},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1537279341048},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1537279341051},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1537279341047},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"11f81d27112e2c4008200d901aa591f54fcb2e69","modified":1537279340924},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1537279340993},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1537279340994},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1537279340994},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1537279340994},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1537279340995},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1537279340995},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1537279340995},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1537279340996},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"17b95828f9db7f131ec0361a8c0e89b0b5c9bff5","modified":1537279340996},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1537279340996},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1537279340996},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1537279340997},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1537279340997},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1537279340997},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1537279340998},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1537279340997},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1537279340998},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1537279340999},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1537279340999},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1537279340999},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1537279340999},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"417f05ff12a2aaca6ceeac8b7e7eb26e9440c4c3","modified":1537279341000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1537279341000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1537279341000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"549a8a0b5301d32acd86a97f17340cdfcd46fb63","modified":1537279341001},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1537279341002},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1537279341001},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1537279341003},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"c0ac49fadd33ca4a9a0a04d5ff2ac6560d0ecd9e","modified":1537279341003},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1537279341002},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"578bb2d5f24cad39205bbafb4c39c7e9962b9fa9","modified":1537279341003},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"e18b90c97aaff027e795f5a0cb10476a71bf1c3a","modified":1537279341005},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"ed9608d2740a33664eb703f806c218a4fc520087","modified":1537279341004},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1537279341006},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1537279341005},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1537279341006},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1537279341007},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1537279341007},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1537279341007},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1537279341007},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1537279341008},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1537279341009},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1537279341008},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"cf2185a0ea170fd8450f592e859a6c941141e5ee","modified":1537279341009},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1537279341009},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1537279341010},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1537279341010},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1537279341010},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1537279341011},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1537279341011},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1537279341011},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1537279341012},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1537279341013},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1537279341012},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1537279341013},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1c18c91ab3c60169ebe654c80c968fd8458786a3","modified":1537279341014},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1537279341013},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1537279341013},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1537279341014},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1537279341021},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1537279341022},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1537279341025},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1537279341046},{"_id":"themes/next/.git/objects/pack/pack-05adec4d1913c542e3d48323ce2270bd7f35f997.pack","hash":"4bd15ebb50483e7c15b615cc3b4a396a342fe7d1","modified":1537279340898}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","date":"2015-07-25T11:44:35.000Z","_content":"\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2015-07-25 19:44:35\n---\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2018-09-18T14:14:20.052Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm8inilb0000rwxs91c14hwn","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"Swagger 入坑","date":"2017-06-02T01:49:36.000Z","_content":"\n记得早初入公司的时候， 和前端的同事对接口，因为坐的近的缘故，直接口头定一下参数，\n然后用QQ交流下，调试，交付，因为沟通很便利，倒也没有遇到太大的障碍，后来公司逐渐\n发展，人员有流动，队伍在壮大，头口定接口的方式的弊端立马就显现出来了，于是小组里面\n搭建了一个文档服务，大家都开始用markdown写接口，感觉高大上的感觉，但也是简陋，写的\n比较粗糙，类似于下面这种：\n\n```\n    Url: www.example.com\n\n    Method: POST\n\n    Request:\n\n        page int required\n        limit int required\n\n    Response:\n\n        {\n            status: ok\n            ...\n        }\n```\n\n每次客户端要接口很紧，写完就立马去实现接口了，当然，因为后续接口可能会有一些变化，也得先改文档\n再更新代码，有时候忘了，也就不了了之了，总之感觉就是用着很不爽。\n\n后来团队转到Golang，自己看了下{% link beego https://beego.me/ %},发现了{% link swagger https://swagger.io/ %}这个东西，觉得很不错的样子，而且Beego的作者将beego融入到\nswagger里面去了，很是不错，觉得写代码即是文档这个概念很好，很规范，很可惜团队最终框架选型没有\n用Beego。不过还好团队的里面有个牛人LD,研究了下swagger下，并最终在团队中推广开来。\n\n官方说法：Swagger是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法，参数和模型紧密集成到服务器端的代码，允许API来始终保持同步。\n\n个人觉得swagger最大的好处是实现了可文档化的代码编写和注释方法，我们写代码总是要写注释，依照swagger的规范，我们能写出可文档化的注释，岂不妙哉！\nswagger的golang文档地址goswagger\n以下是是根据goswagger文档描述写的一个demo:\n\n```go\n// Package classification Petstore API.\n//\n// the purpose of this application is to provide an application\n// that is using plain go code to define an API\n//\n// This should demonstrate all the possible comment annotations\n// that are available to turn go code into a fully compliant swagger 2.0 spec\n//\n// Terms Of Service:\n//\n// there are no TOS at this moment, use at your own risk we take no responsibility\n//\n//     Schemes: http\n//     Host: localhost\n//     BasePath: /\n//     Version: 0.0.1\n//     License: MIT http://opensource.org/licenses/MIT\n//     Contact: John Doe<john.doe@example.com> http://john.doe.com\n//\n//     Consumes:\n//     - application/x-www-form-urlencoded\n//       - application/json\n//\n//     Produces:\n//     - application/json\n//\n//\n// swagger:meta\npackage main\n\nimport (\n    \"github.com/gin-gonic/gin\"\n)\n\n// swagger:parameters loginForm\ntype LoginForm struct {\n    // 用户名\n    // required true\n    User string `form:\"user\" binding:\"required\"`\n\n    // 密码\n    // required true\n    Password string `form:\"password\" binding:\"required\"`\n}\n\n// 请求响应\n// swagger:response commonResponse\ntype CommonResponse struct {\n    // in: body\n    Body struct {\n        Status      string\n        Description string\n    }\n}\n\nfunc main() {\n    router := gin.Default()\n\n    // swagger:route POST /login api loginForm\n    //\n    // Lists pets filtered by some parameters.\n    //\n    // This will show all available pets by default.\n    // You can get the pets that are out of stock\n    //\n    //     Consumes:\n    //     - application/json\n    //\n    //     Produces:\n    //     - application/json\n    //\n    //     Schemes: http, https\n    //\n    //     Responses:\n    //       default: commonResponse\n\n    router.POST(\"/login\", func(c *gin.Context) {\n        var form LoginForm\n        response := CommonResponse{}.Body\n        // in this case proper binding will be automatically selected\n        if c.Bind(&form) == nil {\n            if form.User == \"user\" && form.Password == \"password\" {\n                response.Status = \"Ok\"\n                response.Description = \"you are logged in\"\n                c.JSON(200, response)\n            } else {\n                response.Status = \"Error\"\n                response.Description = \"unauthorized\"\n                c.JSON(401, response)\n            }\n        }\n    })\n    router.Run(\":18080\")\n}\n```\n\n将注释导出一个json文件\n\n``` bash\n$ swagger generate spec -o ./hello.json\n```\n\n为避免语法错误，应使用{% link swagger-editor https://swagger.io/swagger-editor/ %}进行预览，\n我只能说so beautiful!\n写规范的代码，不断review!\n","source":"_posts/Swagger-入坑.md","raw":"---\ntitle: \"Swagger 入坑\"\ndate: 2017-06-02T17:49:36+08:00\n---\n\n记得早初入公司的时候， 和前端的同事对接口，因为坐的近的缘故，直接口头定一下参数，\n然后用QQ交流下，调试，交付，因为沟通很便利，倒也没有遇到太大的障碍，后来公司逐渐\n发展，人员有流动，队伍在壮大，头口定接口的方式的弊端立马就显现出来了，于是小组里面\n搭建了一个文档服务，大家都开始用markdown写接口，感觉高大上的感觉，但也是简陋，写的\n比较粗糙，类似于下面这种：\n\n```\n    Url: www.example.com\n\n    Method: POST\n\n    Request:\n\n        page int required\n        limit int required\n\n    Response:\n\n        {\n            status: ok\n            ...\n        }\n```\n\n每次客户端要接口很紧，写完就立马去实现接口了，当然，因为后续接口可能会有一些变化，也得先改文档\n再更新代码，有时候忘了，也就不了了之了，总之感觉就是用着很不爽。\n\n后来团队转到Golang，自己看了下{% link beego https://beego.me/ %},发现了{% link swagger https://swagger.io/ %}这个东西，觉得很不错的样子，而且Beego的作者将beego融入到\nswagger里面去了，很是不错，觉得写代码即是文档这个概念很好，很规范，很可惜团队最终框架选型没有\n用Beego。不过还好团队的里面有个牛人LD,研究了下swagger下，并最终在团队中推广开来。\n\n官方说法：Swagger是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法，参数和模型紧密集成到服务器端的代码，允许API来始终保持同步。\n\n个人觉得swagger最大的好处是实现了可文档化的代码编写和注释方法，我们写代码总是要写注释，依照swagger的规范，我们能写出可文档化的注释，岂不妙哉！\nswagger的golang文档地址goswagger\n以下是是根据goswagger文档描述写的一个demo:\n\n```go\n// Package classification Petstore API.\n//\n// the purpose of this application is to provide an application\n// that is using plain go code to define an API\n//\n// This should demonstrate all the possible comment annotations\n// that are available to turn go code into a fully compliant swagger 2.0 spec\n//\n// Terms Of Service:\n//\n// there are no TOS at this moment, use at your own risk we take no responsibility\n//\n//     Schemes: http\n//     Host: localhost\n//     BasePath: /\n//     Version: 0.0.1\n//     License: MIT http://opensource.org/licenses/MIT\n//     Contact: John Doe<john.doe@example.com> http://john.doe.com\n//\n//     Consumes:\n//     - application/x-www-form-urlencoded\n//       - application/json\n//\n//     Produces:\n//     - application/json\n//\n//\n// swagger:meta\npackage main\n\nimport (\n    \"github.com/gin-gonic/gin\"\n)\n\n// swagger:parameters loginForm\ntype LoginForm struct {\n    // 用户名\n    // required true\n    User string `form:\"user\" binding:\"required\"`\n\n    // 密码\n    // required true\n    Password string `form:\"password\" binding:\"required\"`\n}\n\n// 请求响应\n// swagger:response commonResponse\ntype CommonResponse struct {\n    // in: body\n    Body struct {\n        Status      string\n        Description string\n    }\n}\n\nfunc main() {\n    router := gin.Default()\n\n    // swagger:route POST /login api loginForm\n    //\n    // Lists pets filtered by some parameters.\n    //\n    // This will show all available pets by default.\n    // You can get the pets that are out of stock\n    //\n    //     Consumes:\n    //     - application/json\n    //\n    //     Produces:\n    //     - application/json\n    //\n    //     Schemes: http, https\n    //\n    //     Responses:\n    //       default: commonResponse\n\n    router.POST(\"/login\", func(c *gin.Context) {\n        var form LoginForm\n        response := CommonResponse{}.Body\n        // in this case proper binding will be automatically selected\n        if c.Bind(&form) == nil {\n            if form.User == \"user\" && form.Password == \"password\" {\n                response.Status = \"Ok\"\n                response.Description = \"you are logged in\"\n                c.JSON(200, response)\n            } else {\n                response.Status = \"Error\"\n                response.Description = \"unauthorized\"\n                c.JSON(401, response)\n            }\n        }\n    })\n    router.Run(\":18080\")\n}\n```\n\n将注释导出一个json文件\n\n``` bash\n$ swagger generate spec -o ./hello.json\n```\n\n为避免语法错误，应使用{% link swagger-editor https://swagger.io/swagger-editor/ %}进行预览，\n我只能说so beautiful!\n写规范的代码，不断review!\n","slug":"Swagger-入坑","published":1,"updated":"2018-09-18T15:11:57.378Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm8inilj0001rwxsw652r3iu","content":"<p>记得早初入公司的时候， 和前端的同事对接口，因为坐的近的缘故，直接口头定一下参数，<br>然后用QQ交流下，调试，交付，因为沟通很便利，倒也没有遇到太大的障碍，后来公司逐渐<br>发展，人员有流动，队伍在壮大，头口定接口的方式的弊端立马就显现出来了，于是小组里面<br>搭建了一个文档服务，大家都开始用markdown写接口，感觉高大上的感觉，但也是简陋，写的<br>比较粗糙，类似于下面这种：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Url: www.example.com</span><br><span class=\"line\"></span><br><span class=\"line\">Method: POST</span><br><span class=\"line\"></span><br><span class=\"line\">Request:</span><br><span class=\"line\"></span><br><span class=\"line\">    page int required</span><br><span class=\"line\">    limit int required</span><br><span class=\"line\"></span><br><span class=\"line\">Response:</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        status: ok</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>每次客户端要接口很紧，写完就立马去实现接口了，当然，因为后续接口可能会有一些变化，也得先改文档<br>再更新代码，有时候忘了，也就不了了之了，总之感觉就是用着很不爽。</p>\n<p>后来团队转到Golang，自己看了下<a href=\"https://beego.me/\" target=\"_blank\" rel=\"noopener\">beego</a>,发现了<a href=\"https://swagger.io/\" target=\"_blank\" rel=\"noopener\">swagger</a>这个东西，觉得很不错的样子，而且Beego的作者将beego融入到<br>swagger里面去了，很是不错，觉得写代码即是文档这个概念很好，很规范，很可惜团队最终框架选型没有<br>用Beego。不过还好团队的里面有个牛人LD,研究了下swagger下，并最终在团队中推广开来。</p>\n<p>官方说法：Swagger是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法，参数和模型紧密集成到服务器端的代码，允许API来始终保持同步。</p>\n<p>个人觉得swagger最大的好处是实现了可文档化的代码编写和注释方法，我们写代码总是要写注释，依照swagger的规范，我们能写出可文档化的注释，岂不妙哉！<br>swagger的golang文档地址goswagger<br>以下是是根据goswagger文档描述写的一个demo:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Package classification Petstore API.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// the purpose of this application is to provide an application</span></span><br><span class=\"line\"><span class=\"comment\">// that is using plain go code to define an API</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// This should demonstrate all the possible comment annotations</span></span><br><span class=\"line\"><span class=\"comment\">// that are available to turn go code into a fully compliant swagger 2.0 spec</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Terms Of Service:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// there are no TOS at this moment, use at your own risk we take no responsibility</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//     Schemes: http</span></span><br><span class=\"line\"><span class=\"comment\">//     Host: localhost</span></span><br><span class=\"line\"><span class=\"comment\">//     BasePath: /</span></span><br><span class=\"line\"><span class=\"comment\">//     Version: 0.0.1</span></span><br><span class=\"line\"><span class=\"comment\">//     License: MIT http://opensource.org/licenses/MIT</span></span><br><span class=\"line\"><span class=\"comment\">//     Contact: John Doe&lt;john.doe@example.com&gt; http://john.doe.com</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//     Consumes:</span></span><br><span class=\"line\"><span class=\"comment\">//     - application/x-www-form-urlencoded</span></span><br><span class=\"line\"><span class=\"comment\">//       - application/json</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//     Produces:</span></span><br><span class=\"line\"><span class=\"comment\">//     - application/json</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// swagger:meta</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"github.com/gin-gonic/gin\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// swagger:parameters loginForm</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> LoginForm <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用户名</span></span><br><span class=\"line\">    <span class=\"comment\">// required true</span></span><br><span class=\"line\">    User <span class=\"keyword\">string</span> <span class=\"string\">`form:\"user\" binding:\"required\"`</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 密码</span></span><br><span class=\"line\">    <span class=\"comment\">// required true</span></span><br><span class=\"line\">    Password <span class=\"keyword\">string</span> <span class=\"string\">`form:\"password\" binding:\"required\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请求响应</span></span><br><span class=\"line\"><span class=\"comment\">// swagger:response commonResponse</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> CommonResponse <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// in: body</span></span><br><span class=\"line\">    Body <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">        Status      <span class=\"keyword\">string</span></span><br><span class=\"line\">        Description <span class=\"keyword\">string</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    router := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// swagger:route POST /login api loginForm</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// Lists pets filtered by some parameters.</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// This will show all available pets by default.</span></span><br><span class=\"line\">    <span class=\"comment\">// You can get the pets that are out of stock</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">//     Consumes:</span></span><br><span class=\"line\">    <span class=\"comment\">//     - application/json</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">//     Produces:</span></span><br><span class=\"line\">    <span class=\"comment\">//     - application/json</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">//     Schemes: http, https</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">//     Responses:</span></span><br><span class=\"line\">    <span class=\"comment\">//       default: commonResponse</span></span><br><span class=\"line\"></span><br><span class=\"line\">    router.POST(<span class=\"string\">\"/login\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> form LoginForm</span><br><span class=\"line\">        response := CommonResponse&#123;&#125;.Body</span><br><span class=\"line\">        <span class=\"comment\">// in this case proper binding will be automatically selected</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> c.Bind(&amp;form) == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> form.User == <span class=\"string\">\"user\"</span> &amp;&amp; form.Password == <span class=\"string\">\"password\"</span> &#123;</span><br><span class=\"line\">                response.Status = <span class=\"string\">\"Ok\"</span></span><br><span class=\"line\">                response.Description = <span class=\"string\">\"you are logged in\"</span></span><br><span class=\"line\">                c.JSON(<span class=\"number\">200</span>, response)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                response.Status = <span class=\"string\">\"Error\"</span></span><br><span class=\"line\">                response.Description = <span class=\"string\">\"unauthorized\"</span></span><br><span class=\"line\">                c.JSON(<span class=\"number\">401</span>, response)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    router.Run(<span class=\"string\">\":18080\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将注释导出一个json文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ swagger generate spec -o ./hello.json</span><br></pre></td></tr></table></figure>\n<p>为避免语法错误，应使用<a href=\"https://swagger.io/swagger-editor/\" target=\"_blank\" rel=\"noopener\">swagger-editor</a>进行预览，<br>我只能说so beautiful!<br>写规范的代码，不断review!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>记得早初入公司的时候， 和前端的同事对接口，因为坐的近的缘故，直接口头定一下参数，<br>然后用QQ交流下，调试，交付，因为沟通很便利，倒也没有遇到太大的障碍，后来公司逐渐<br>发展，人员有流动，队伍在壮大，头口定接口的方式的弊端立马就显现出来了，于是小组里面<br>搭建了一个文档服务，大家都开始用markdown写接口，感觉高大上的感觉，但也是简陋，写的<br>比较粗糙，类似于下面这种：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Url: www.example.com</span><br><span class=\"line\"></span><br><span class=\"line\">Method: POST</span><br><span class=\"line\"></span><br><span class=\"line\">Request:</span><br><span class=\"line\"></span><br><span class=\"line\">    page int required</span><br><span class=\"line\">    limit int required</span><br><span class=\"line\"></span><br><span class=\"line\">Response:</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        status: ok</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>每次客户端要接口很紧，写完就立马去实现接口了，当然，因为后续接口可能会有一些变化，也得先改文档<br>再更新代码，有时候忘了，也就不了了之了，总之感觉就是用着很不爽。</p>\n<p>后来团队转到Golang，自己看了下<a href=\"https://beego.me/\" target=\"_blank\" rel=\"noopener\">beego</a>,发现了<a href=\"https://swagger.io/\" target=\"_blank\" rel=\"noopener\">swagger</a>这个东西，觉得很不错的样子，而且Beego的作者将beego融入到<br>swagger里面去了，很是不错，觉得写代码即是文档这个概念很好，很规范，很可惜团队最终框架选型没有<br>用Beego。不过还好团队的里面有个牛人LD,研究了下swagger下，并最终在团队中推广开来。</p>\n<p>官方说法：Swagger是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法，参数和模型紧密集成到服务器端的代码，允许API来始终保持同步。</p>\n<p>个人觉得swagger最大的好处是实现了可文档化的代码编写和注释方法，我们写代码总是要写注释，依照swagger的规范，我们能写出可文档化的注释，岂不妙哉！<br>swagger的golang文档地址goswagger<br>以下是是根据goswagger文档描述写的一个demo:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Package classification Petstore API.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// the purpose of this application is to provide an application</span></span><br><span class=\"line\"><span class=\"comment\">// that is using plain go code to define an API</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// This should demonstrate all the possible comment annotations</span></span><br><span class=\"line\"><span class=\"comment\">// that are available to turn go code into a fully compliant swagger 2.0 spec</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Terms Of Service:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// there are no TOS at this moment, use at your own risk we take no responsibility</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//     Schemes: http</span></span><br><span class=\"line\"><span class=\"comment\">//     Host: localhost</span></span><br><span class=\"line\"><span class=\"comment\">//     BasePath: /</span></span><br><span class=\"line\"><span class=\"comment\">//     Version: 0.0.1</span></span><br><span class=\"line\"><span class=\"comment\">//     License: MIT http://opensource.org/licenses/MIT</span></span><br><span class=\"line\"><span class=\"comment\">//     Contact: John Doe&lt;john.doe@example.com&gt; http://john.doe.com</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//     Consumes:</span></span><br><span class=\"line\"><span class=\"comment\">//     - application/x-www-form-urlencoded</span></span><br><span class=\"line\"><span class=\"comment\">//       - application/json</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//     Produces:</span></span><br><span class=\"line\"><span class=\"comment\">//     - application/json</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// swagger:meta</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"github.com/gin-gonic/gin\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// swagger:parameters loginForm</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> LoginForm <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用户名</span></span><br><span class=\"line\">    <span class=\"comment\">// required true</span></span><br><span class=\"line\">    User <span class=\"keyword\">string</span> <span class=\"string\">`form:\"user\" binding:\"required\"`</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 密码</span></span><br><span class=\"line\">    <span class=\"comment\">// required true</span></span><br><span class=\"line\">    Password <span class=\"keyword\">string</span> <span class=\"string\">`form:\"password\" binding:\"required\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请求响应</span></span><br><span class=\"line\"><span class=\"comment\">// swagger:response commonResponse</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> CommonResponse <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// in: body</span></span><br><span class=\"line\">    Body <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">        Status      <span class=\"keyword\">string</span></span><br><span class=\"line\">        Description <span class=\"keyword\">string</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    router := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// swagger:route POST /login api loginForm</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// Lists pets filtered by some parameters.</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// This will show all available pets by default.</span></span><br><span class=\"line\">    <span class=\"comment\">// You can get the pets that are out of stock</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">//     Consumes:</span></span><br><span class=\"line\">    <span class=\"comment\">//     - application/json</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">//     Produces:</span></span><br><span class=\"line\">    <span class=\"comment\">//     - application/json</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">//     Schemes: http, https</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">//     Responses:</span></span><br><span class=\"line\">    <span class=\"comment\">//       default: commonResponse</span></span><br><span class=\"line\"></span><br><span class=\"line\">    router.POST(<span class=\"string\">\"/login\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> form LoginForm</span><br><span class=\"line\">        response := CommonResponse&#123;&#125;.Body</span><br><span class=\"line\">        <span class=\"comment\">// in this case proper binding will be automatically selected</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> c.Bind(&amp;form) == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> form.User == <span class=\"string\">\"user\"</span> &amp;&amp; form.Password == <span class=\"string\">\"password\"</span> &#123;</span><br><span class=\"line\">                response.Status = <span class=\"string\">\"Ok\"</span></span><br><span class=\"line\">                response.Description = <span class=\"string\">\"you are logged in\"</span></span><br><span class=\"line\">                c.JSON(<span class=\"number\">200</span>, response)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                response.Status = <span class=\"string\">\"Error\"</span></span><br><span class=\"line\">                response.Description = <span class=\"string\">\"unauthorized\"</span></span><br><span class=\"line\">                c.JSON(<span class=\"number\">401</span>, response)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    router.Run(<span class=\"string\">\":18080\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将注释导出一个json文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ swagger generate spec -o ./hello.json</span><br></pre></td></tr></table></figure>\n<p>为避免语法错误，应使用<a href=\"https://swagger.io/swagger-editor/\" target=\"_blank\" rel=\"noopener\">swagger-editor</a>进行预览，<br>我只能说so beautiful!<br>写规范的代码，不断review!</p>\n"},{"title":"golang中特殊字符的json序列化","date":"2018-06-18T17:40:14.000Z","_content":"\n\n先来看一段`golang`\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\n\nfunc main() {\n\n\tdata := map[string]string{\n\t\t\"str0\": \"Hello, world\",\n\t\t\"str1\": \"<\",\n\t\t\"str2\": \">\",\n\t\t\"str3\": \"&\",\n\t}\n\tjsonStr, _ := json.Marshal(data)\n\n\tfmt.Println(string(jsonStr))\n}\n```\n输出结果\n```\n{\"str0\":\"Hello, world\",\"str1\":\"\\u003c\",\"str2\":\"\\u003e\",\"str3\":\"\\u0026\"}\n```\n\n先来段`rust`的\n```rust\nextern crate rustc_serialize;\nuse rustc_serialize::json;\nuse std::collections::HashMap;\n\nfn main(){\n    let mut data =  HashMap::new();\n    data.insert(\"str0\",\"Hello, world\");\n    data.insert(\"str1\",\"<\");\n    data.insert(\"str2\",\">\");\n    data.insert(\"str3\",\"&\");\n    println!(\"{}\", json::encode(&data).unwrap());\n}\n}\n```\n结果\n```\n{\"str0\":\"Hello, world\",\"str2\":\">\",\"str1\":\"<\",\"str3\":\"&\"}\n```\n再来看段`python`的\n```python\nimport json\n\ndata = dict(str0='Hello, world',str1='<',str2='>',str3='&')\n\nprint(json.dumps(data))\n```\n输出结果\n```\n{\"str0\": \"Hello, world\", \"str1\": \"<\", \"str2\": \">\", \"str3\": \"&\"}\n```\n\n再看看java的\n```java\nimport org.json.simple.JSONObject;\n\nclass JsonDemo\n{\n    public static void main(String[] args)\n    {\n        JSONObject obj = new JSONObject();\n\n        obj.put(\"str0\", \"Hello, world\");\n        obj.put(\"str1\", \"<\");\n        obj.put(\"str2\", \">\");\n        obj.put(\"str3\", \"&\");\n\n        System.out.println(obj);\n    }\n}\n```\n输出结果\n```\n{\"str3\":\"&\",\"str1\":\"<\",\"str2\":\">\",\"str0\":\"Hello, world\"}\n```\n\n可以看到`python`、`rust`和`java`对这4个字符串序列化结果几乎是相同的了(除了java序列化后顺序有微小变化外），golang明显对 *&lt;* ,\n*&gt;* , *&* 进行了转义处理，看看文档怎么说的\n\n>// String values encode as JSON strings coerced to valid UTF-8,  \n// replacing invalid bytes with the Unicode replacement rune.  \n// The angle brackets \"<\" and \">\" are escaped to \"\\u003c\" and \"\\u003e\"  \n// to keep some browsers from misinterpreting JSON output as HTML.  \n// Ampersand \"&\" is also escaped to \"\\u0026\" for the same reason.  \n\n*&* 被转义是为了防止一些浏览器将JSON输出曲解为HTML，\n而 *&lt;* ,*&gt;* 被强制转义是因为golang认为这俩是无效字节（这点比较奇怪），\n我如果技术栈都是golang还好说，\b如果跨语言跨部门合作一定需要注意这点（已踩坑）……\n","source":"_posts/golang中特殊字符的json序列化.md","raw":"---\ntitle: golang中特殊字符的json序列化\ndate: 2018-06-19 01:40:14\ntags:\n---\n\n\n先来看一段`golang`\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\n\nfunc main() {\n\n\tdata := map[string]string{\n\t\t\"str0\": \"Hello, world\",\n\t\t\"str1\": \"<\",\n\t\t\"str2\": \">\",\n\t\t\"str3\": \"&\",\n\t}\n\tjsonStr, _ := json.Marshal(data)\n\n\tfmt.Println(string(jsonStr))\n}\n```\n输出结果\n```\n{\"str0\":\"Hello, world\",\"str1\":\"\\u003c\",\"str2\":\"\\u003e\",\"str3\":\"\\u0026\"}\n```\n\n先来段`rust`的\n```rust\nextern crate rustc_serialize;\nuse rustc_serialize::json;\nuse std::collections::HashMap;\n\nfn main(){\n    let mut data =  HashMap::new();\n    data.insert(\"str0\",\"Hello, world\");\n    data.insert(\"str1\",\"<\");\n    data.insert(\"str2\",\">\");\n    data.insert(\"str3\",\"&\");\n    println!(\"{}\", json::encode(&data).unwrap());\n}\n}\n```\n结果\n```\n{\"str0\":\"Hello, world\",\"str2\":\">\",\"str1\":\"<\",\"str3\":\"&\"}\n```\n再来看段`python`的\n```python\nimport json\n\ndata = dict(str0='Hello, world',str1='<',str2='>',str3='&')\n\nprint(json.dumps(data))\n```\n输出结果\n```\n{\"str0\": \"Hello, world\", \"str1\": \"<\", \"str2\": \">\", \"str3\": \"&\"}\n```\n\n再看看java的\n```java\nimport org.json.simple.JSONObject;\n\nclass JsonDemo\n{\n    public static void main(String[] args)\n    {\n        JSONObject obj = new JSONObject();\n\n        obj.put(\"str0\", \"Hello, world\");\n        obj.put(\"str1\", \"<\");\n        obj.put(\"str2\", \">\");\n        obj.put(\"str3\", \"&\");\n\n        System.out.println(obj);\n    }\n}\n```\n输出结果\n```\n{\"str3\":\"&\",\"str1\":\"<\",\"str2\":\">\",\"str0\":\"Hello, world\"}\n```\n\n可以看到`python`、`rust`和`java`对这4个字符串序列化结果几乎是相同的了(除了java序列化后顺序有微小变化外），golang明显对 *&lt;* ,\n*&gt;* , *&* 进行了转义处理，看看文档怎么说的\n\n>// String values encode as JSON strings coerced to valid UTF-8,  \n// replacing invalid bytes with the Unicode replacement rune.  \n// The angle brackets \"<\" and \">\" are escaped to \"\\u003c\" and \"\\u003e\"  \n// to keep some browsers from misinterpreting JSON output as HTML.  \n// Ampersand \"&\" is also escaped to \"\\u0026\" for the same reason.  \n\n*&* 被转义是为了防止一些浏览器将JSON输出曲解为HTML，\n而 *&lt;* ,*&gt;* 被强制转义是因为golang认为这俩是无效字节（这点比较奇怪），\n我如果技术栈都是golang还好说，\b如果跨语言跨部门合作一定需要注意这点（已踩坑）……\n","slug":"golang中特殊字符的json序列化","published":1,"updated":"2018-09-18T17:40:50.161Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm8inilp0002rwxs9ob3t5j2","content":"<p>先来看一段<code>golang</code><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"encoding/json\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdata := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"str0\"</span>: <span class=\"string\">\"Hello, world\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"str1\"</span>: <span class=\"string\">\"&lt;\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"str2\"</span>: <span class=\"string\">\"&gt;\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"str3\"</span>: <span class=\"string\">\"&amp;\"</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tjsonStr, _ := json.Marshal(data)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"keyword\">string</span>(jsonStr))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;str0&quot;:&quot;Hello, world&quot;,&quot;str1&quot;:&quot;\\u003c&quot;,&quot;str2&quot;:&quot;\\u003e&quot;,&quot;str3&quot;:&quot;\\u0026&quot;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>先来段<code>rust</code>的<br><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> rustc_serialize;</span><br><span class=\"line\"><span class=\"keyword\">use</span> rustc_serialize::json;</span><br><span class=\"line\"><span class=\"keyword\">use</span> std::collections::HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> data =  HashMap::new();</span><br><span class=\"line\">    data.insert(<span class=\"string\">\"str0\"</span>,<span class=\"string\">\"Hello, world\"</span>);</span><br><span class=\"line\">    data.insert(<span class=\"string\">\"str1\"</span>,<span class=\"string\">\"&lt;\"</span>);</span><br><span class=\"line\">    data.insert(<span class=\"string\">\"str2\"</span>,<span class=\"string\">\"&gt;\"</span>);</span><br><span class=\"line\">    data.insert(<span class=\"string\">\"str3\"</span>,<span class=\"string\">\"&amp;\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"&#123;&#125;\"</span>, json::encode(&amp;data).unwrap());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;str0&quot;:&quot;Hello, world&quot;,&quot;str2&quot;:&quot;&gt;&quot;,&quot;str1&quot;:&quot;&lt;&quot;,&quot;str3&quot;:&quot;&amp;&quot;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>再来看段<code>python</code>的<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">data = dict(str0=<span class=\"string\">'Hello, world'</span>,str1=<span class=\"string\">'&lt;'</span>,str2=<span class=\"string\">'&gt;'</span>,str3=<span class=\"string\">'&amp;'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(json.dumps(data))</span><br></pre></td></tr></table></figure></p>\n<p>输出结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;str0&quot;: &quot;Hello, world&quot;, &quot;str1&quot;: &quot;&lt;&quot;, &quot;str2&quot;: &quot;&gt;&quot;, &quot;str3&quot;: &quot;&amp;&quot;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>再看看java的<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.json.simple.JSONObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JsonDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        JSONObject obj = <span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\"></span><br><span class=\"line\">        obj.put(<span class=\"string\">\"str0\"</span>, <span class=\"string\">\"Hello, world\"</span>);</span><br><span class=\"line\">        obj.put(<span class=\"string\">\"str1\"</span>, <span class=\"string\">\"&lt;\"</span>);</span><br><span class=\"line\">        obj.put(<span class=\"string\">\"str2\"</span>, <span class=\"string\">\"&gt;\"</span>);</span><br><span class=\"line\">        obj.put(<span class=\"string\">\"str3\"</span>, <span class=\"string\">\"&amp;\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;str3&quot;:&quot;&amp;&quot;,&quot;str1&quot;:&quot;&lt;&quot;,&quot;str2&quot;:&quot;&gt;&quot;,&quot;str0&quot;:&quot;Hello, world&quot;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到<code>python</code>、<code>rust</code>和<code>java</code>对这4个字符串序列化结果几乎是相同的了(除了java序列化后顺序有微小变化外），golang明显对 <em>&lt;</em> ,<br><em>&gt;</em> , <em>&amp;</em> 进行了转义处理，看看文档怎么说的</p>\n<blockquote>\n<p>// String values encode as JSON strings coerced to valid UTF-8,<br>// replacing invalid bytes with the Unicode replacement rune.<br>// The angle brackets “&lt;” and “&gt;” are escaped to “\\u003c” and “\\u003e”<br>// to keep some browsers from misinterpreting JSON output as HTML.<br>// Ampersand “&amp;” is also escaped to “\\u0026” for the same reason.  </p>\n</blockquote>\n<p><em>&amp;</em> 被转义是为了防止一些浏览器将JSON输出曲解为HTML，<br>而 <em>&lt;</em> ,<em>&gt;</em> 被强制转义是因为golang认为这俩是无效字节（这点比较奇怪），<br>我如果技术栈都是golang还好说，\b如果跨语言跨部门合作一定需要注意这点（已踩坑）……</p>\n","site":{"data":{}},"excerpt":"","more":"<p>先来看一段<code>golang</code><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"encoding/json\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdata := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"str0\"</span>: <span class=\"string\">\"Hello, world\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"str1\"</span>: <span class=\"string\">\"&lt;\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"str2\"</span>: <span class=\"string\">\"&gt;\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"str3\"</span>: <span class=\"string\">\"&amp;\"</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tjsonStr, _ := json.Marshal(data)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"keyword\">string</span>(jsonStr))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;str0&quot;:&quot;Hello, world&quot;,&quot;str1&quot;:&quot;\\u003c&quot;,&quot;str2&quot;:&quot;\\u003e&quot;,&quot;str3&quot;:&quot;\\u0026&quot;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>先来段<code>rust</code>的<br><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> rustc_serialize;</span><br><span class=\"line\"><span class=\"keyword\">use</span> rustc_serialize::json;</span><br><span class=\"line\"><span class=\"keyword\">use</span> std::collections::HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> data =  HashMap::new();</span><br><span class=\"line\">    data.insert(<span class=\"string\">\"str0\"</span>,<span class=\"string\">\"Hello, world\"</span>);</span><br><span class=\"line\">    data.insert(<span class=\"string\">\"str1\"</span>,<span class=\"string\">\"&lt;\"</span>);</span><br><span class=\"line\">    data.insert(<span class=\"string\">\"str2\"</span>,<span class=\"string\">\"&gt;\"</span>);</span><br><span class=\"line\">    data.insert(<span class=\"string\">\"str3\"</span>,<span class=\"string\">\"&amp;\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"&#123;&#125;\"</span>, json::encode(&amp;data).unwrap());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;str0&quot;:&quot;Hello, world&quot;,&quot;str2&quot;:&quot;&gt;&quot;,&quot;str1&quot;:&quot;&lt;&quot;,&quot;str3&quot;:&quot;&amp;&quot;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>再来看段<code>python</code>的<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">data = dict(str0=<span class=\"string\">'Hello, world'</span>,str1=<span class=\"string\">'&lt;'</span>,str2=<span class=\"string\">'&gt;'</span>,str3=<span class=\"string\">'&amp;'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(json.dumps(data))</span><br></pre></td></tr></table></figure></p>\n<p>输出结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;str0&quot;: &quot;Hello, world&quot;, &quot;str1&quot;: &quot;&lt;&quot;, &quot;str2&quot;: &quot;&gt;&quot;, &quot;str3&quot;: &quot;&amp;&quot;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>再看看java的<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.json.simple.JSONObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JsonDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        JSONObject obj = <span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\"></span><br><span class=\"line\">        obj.put(<span class=\"string\">\"str0\"</span>, <span class=\"string\">\"Hello, world\"</span>);</span><br><span class=\"line\">        obj.put(<span class=\"string\">\"str1\"</span>, <span class=\"string\">\"&lt;\"</span>);</span><br><span class=\"line\">        obj.put(<span class=\"string\">\"str2\"</span>, <span class=\"string\">\"&gt;\"</span>);</span><br><span class=\"line\">        obj.put(<span class=\"string\">\"str3\"</span>, <span class=\"string\">\"&amp;\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;str3&quot;:&quot;&amp;&quot;,&quot;str1&quot;:&quot;&lt;&quot;,&quot;str2&quot;:&quot;&gt;&quot;,&quot;str0&quot;:&quot;Hello, world&quot;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到<code>python</code>、<code>rust</code>和<code>java</code>对这4个字符串序列化结果几乎是相同的了(除了java序列化后顺序有微小变化外），golang明显对 <em>&lt;</em> ,<br><em>&gt;</em> , <em>&amp;</em> 进行了转义处理，看看文档怎么说的</p>\n<blockquote>\n<p>// String values encode as JSON strings coerced to valid UTF-8,<br>// replacing invalid bytes with the Unicode replacement rune.<br>// The angle brackets “&lt;” and “&gt;” are escaped to “\\u003c” and “\\u003e”<br>// to keep some browsers from misinterpreting JSON output as HTML.<br>// Ampersand “&amp;” is also escaped to “\\u0026” for the same reason.  </p>\n</blockquote>\n<p><em>&amp;</em> 被转义是为了防止一些浏览器将JSON输出曲解为HTML，<br>而 <em>&lt;</em> ,<em>&gt;</em> 被强制转义是因为golang认为这俩是无效字节（这点比较奇怪），<br>我如果技术栈都是golang还好说，\b如果跨语言跨部门合作一定需要注意这点（已踩坑）……</p>\n"},{"title":"Go语言的栈和指针机制 ","date":"2018-09-11T03:32:32.000Z","_content":"\n阅读前请悉知：本文是一篇翻译文章，出于对原文的喜爱与敬畏，所以需要强调：如果读者英文阅读能力好，请直接移步文末原文链接；如果对这篇翻译所述知识感兴趣，也请一定要再看下英文原文，加深理解。翻译中为了表达的需要，加入了自己的一些理解，不过因为知识有限，翻译过程难免纰漏，如有问题，欢迎留言指正。\n\n# 介绍\n我不想夸赞指针，因为它很难理解，如若使用不当，极易造成bug, 甚至引发性能问题，这在编写并发或者多线程软件时，显的尤为突出。也就难怪许多编程语言都试图对程序员隐藏指针特性了。但是，当使用Go编写软件，你是没有办法避开指针的。如果对指针没有深入的理解，你将很难写出简洁高效的代码。\n\n# 帧（边界）\n函数在独立的内存空间（帧）执行，而这个独立的内存空间是有边界的，这个边界我们称之为帧边界。每个帧都允许函数在自己的上下文中运行，并提供流量控制(flow control, 暂且这么翻译)。\n函数只能直接访问帧内的内存，帧外的内存不能间接访问。如果函数需要访问帧外的存储空间，则该内存必须与函数共享。为了理解接下来的内容，我们需要首先理解帧概念和机制。（我的理解是：帧是一段有限的供函数运行的内存块）\n\n当一个函数被调用，会有两个帧发生交互, 即：代码从调用函数的帧转换到被调用函数的帧，如果函数调用需要传递数据，那么该数据必须从一个帧传递到另一个帧。在Go中，数据在两帧之间是**按值**传递的。\n\n**按值**传递的提高了代码的可读性。函数调用中数据值从一个函数复制传递，另一个函数接收到这个值，整个过程很直观，所以你写代码时不必为了可读性而特意掩盖函数间交互的过程，因为它就是这么直观，因而这种直观可以帮助你理解每个函数调用是在如何影响程序运行的。\n\n## Listing 1\n```\n01 package main\n02\n03 func main() {\n04\n05    // Declare variable of type int with a value of 10.\n06    count := 10\n07\n08    // Display the \"value of\" and \"address of\" count.\n09    println(\"count:\\tValue Of[\", count, \"]\\tAddr Of[\", &count, \"]\")\n10\n11    // Pass the \"value of\" the count.\n12    increment(count)\n13\n14    println(\"count:\\tValue Of[\", count, \"]\\tAddr Of[\", &count, \"]\")\n15 }\n16\n17 //go:noinline\n18 func increment(inc int) {\n19\n20    // Increment the \"value of\" inc.\n21    inc++\n22    println(\"inc:\\tValue Of[\", inc, \"]\\tAddr Of[\", &inc, \"]\")\n23 }\n```\n当你执行以上代码时，golang中`runtime`会创建一个主`goroutine`，这个主`goroutine`会开始执行所有的`main`函数内所有代码的初始化。需要明白的是，`goroutine`是挂在操作系统线程上的，该线程最终在机器的某个核心上执行。在1.8版本中，每个`goroutine`都有一个初始化大小为2048个字节的连续内存块，这构成了它的堆栈空间。这个初始堆栈大小在过去几年发生了变化，将来可能会再次发生变化。\n\n栈很重要，因为它为每个单独的函数提供了有限的物理内存空间。在主`goroutine`执行清单1中的主函数时，`goroutine`的栈是以下这样\n\n## Figure 1\n![image.png](https://upload-images.jianshu.io/upload_images/44480-b255d954cb7affb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n你可以在图1中看到，栈的一部分已经被主函数所占据，即`main`所属的内存帧（帧在栈上分配的），这个方框表示栈上的主函数边界。帧的范围作为调用函数时执行的代码的一部分建立。你还可以看到`count`变量的内存已经放在main所在帧的地址0x10429fa4上。\n\n图1还说明了另一个有趣的问题。活动帧以下的所有栈内存都无效，但活动帧以上的栈内存是有效的。我需要明确帧的有效部分和无效部分之间的界限（是否有被使用）。\n\n# 地址\n\n变量的作用是特定的内存位置赋予名字，以提高代码的可读性，并帮助你分析正在使用的数据。如果你有一个变量，那么对应内存中一个值，如果内存中有一个值，那么它必须有一个地址。在第09行，主函数调用内置函数println来显示`count`变量的“值”和“地址”。\n\n## Listing 2\n\n```\n09    println(\"count:\\tValue Of[\", count, \"]\\tAddr Of[\", &count, \"]\")\n```\n使用&运算符来获取变量位置的地址并不新奇，其它语言也使用这个运算符。第09行的输出应该类似于下面的输出，如果你在一个32位架构(如游乐场)上运行代码:\n\n## Listing 3\n```\ncount:  Value Of[ 10 ]  Addr Of[ 0x10429fa4 ]\n```\n\n# 函数调用\n\n在第12行上，`main`函数调用了`increment`函数。\n\n## Listing 4\n```\n12    increment(count)\n```\n调用函数意味着`goroutine`需要在栈上开辟一个新的内存空间。然而事情要可能比你想像的还要复杂一些哦。要成功地进行此函数调用，需要在转换过程中在两个帧之间传递数据。具体地说，一个整数值将在调用期间被复制和传递。通过查看第18行上的`increment`函数的声明，你可以看到这一点。\n\n## Listing 5\n\n```\n18 func increment(inc int) {\n```\n如果你在第12行再次看到递增的函数调用，你会看到代码正在传递`count`变量的“值”。该值将被复制、传递给`increment`函数所在的帧中。记住，`increment`函数只能在它自己的空间内直接读写内存，因此它需要`inc`变量接收、存储和访问它自己传递的`count`值的副本。\n\n在`increment`函数内部的代码开始执行之前，`goroutine`的栈看起来是这样的:\nFigure 2\n![image.png](https://upload-images.jianshu.io/upload_images/44480-0c74d10a3c1675b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以看到栈上现在有两个帧，一个是`main`，一个`increment`。在`increment`的帧中，你可以看到`inc`变量，它包含在函数调用期间复制和传递的值10。`inc`变量的地址是0x10429f98，内存更小，因为帧在栈中是由高地址向低地址扩展的，不过这只是一个实现细节，没有任何意义。重要的是`goroutine`从`main`的帧中获取`count`的值，并使用`inc`变量在帧中存储了该值的副本。\n\n`increment`函数中的其余代码显示`inc`变量的“值”和“地址”。\n\n## Listing 6\n```\n21    inc++\n22    println(\"inc:\\tValue Of[\", inc, \"]\\tAddr Of[\", &inc, \"]\")\n```\n22行的输出如下\n## Listing 7\n```\ninc:    Value Of[ 11 ]  Addr Of[ 0x10429f98 ]\n```\n这是在执行到第22行后栈的样子:\n## Figure 3\n![image.png](https://upload-images.jianshu.io/upload_images/44480-03d0709e82b2e9df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n执行第21和22行之后，`increment`函数返回到`main`函数。然后主函数在第14行再次`count`变量的“值”和“地址”。\n\n## Listing 8\n\n```\n14    println(\"count:\\tValue Of[\",count, \"]\\tAddr Of[\", &count, \"]\")\n```\n输出如下如示\n```\ncount:  Value Of[ 10 ]  Addr Of[ 0x10429fa4 ]\ninc:    Value Of[ 11 ]  Addr Of[ 0x10429f98 ]\ncount:  Value Of[ 10 ]  Addr Of[ 0x10429fa4 ]\n```\n`main`所在帧中`count`的值在调用`increment`前后相同。\n\n# 函数返回\n\n当一个函数返回到调用方函数时，栈上的内存实际发生了什么?其实什么都没有。这是`increment`函数执行完成返回后栈的样子:\n## Figure 4\n![image.png](https://upload-images.jianshu.io/upload_images/44480-47c7323bcebfdd41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n与图3几乎完全相同，只是`increment`函数关联的帧现在被认为是无效内存。这是因为`main`的帧现在是活动帧。`increment`函数所在的帧在内存中保持不变，此时它是非活动帧。\n\n清理返回函数的帧的内存会浪费时间，因为你不知道是否还需要这个内存。所以内存就保持原样了。在每次函数调用期间，在获取帧时，该帧的栈内存将被清除。这是通过初始化放置在帧中的任何值来完成的。因为所有的值都被初始化为至少它们的“零值”，所以栈在每次函数调用时都会自动清理。\n（这里我理解因为每个帧其实是有边界的，程序运行时知道此时帧的边界在哪里，比如若此时`main`调用另一个函数`increment2`,可能会占据原`increment`的帧，完成初始化，相当于是覆盖了）\n\n# 共享\n\n有什么办法能让`increment`函数直接操作`main`的帧中存在的`count`变量呢?答案是指针。指针的存在只有一个目的，即与函数共享一个值，以便函数可以读写该值，即使该值并不直接存在于其自身的帧中。\n\n如果你不知道共享，你就不需要使用指针。学习指针时，重要的是要使用清晰的词汇表，而不是操作符或语法。所以请记住，指针是用于共享的，并在你读取代码时将`&`操作符替换为“共享”。\n\n# 指针类型\n\nGo有许多内置类型， 这些内置类型都能很方便的声明为指针类型。比如已经存在一个名为`int`的内置类型，因此有一个指针类型称为`*int`。如果声明了一个名为`User`的类型，就可以获得一个名为`*User`的指针类型。\n\n所有指针类型都具有相同的两个特征。首先，他们从角色*开始。其次，它们都具有相同的内存大小和表示形式，即表示地址的4或8字节。在32位架构上，指针需要4字节的内存，而在64位架构(如你的机器)上，它们需要8字节的内存。\n\n# 间接访问内存\n\n看看这个小程序，它执行一个函数调用，通过**按值**传递地址。这将与`increment`函数共享`main`的帧中的`count`变量\n\n## Listing 10\n```\n01 package main\n02\n03 func main() {\n04\n05    // Declare variable of type int with a value of 10.\n06    count := 10\n07\n08    // Display the \"value of\" and \"address of\" count.\n09    println(\"count:\\tValue Of[\", count, \"]\\t\\tAddr Of[\", &count, \"]\")\n10\n11    // Pass the \"address of\" count.\n12    increment(&count)\n13\n14    println(\"count:\\tValue Of[\", count, \"]\\t\\tAddr Of[\", &count, \"]\")\n15 }\n16\n17 //go:noinline\n18 func increment(inc *int) {\n19\n20    // Increment the \"value of\" count that the \"pointer points to\". (dereferencing)\n21    *inc++\n22    println(\"inc:\\tValue Of[\", inc, \"]\\tAddr Of[\", &inc, \"]\\tValue Points To[\", *inc, \"]\")\n23 }\n```\n\n从最初的程序中，有三个有趣的变化。这是第12行上的第一个变化\n## Listing 11\n```\n12    increment(&count)\n```\n这一次在第12行，代码不是复制和传递计数的“值”，而是传递计数的“地址”。现在你可以说，我正在与`increment`函数“共享”`count`变量。这就是`&`操作符功能：“共享”。\n\n请理解这仍然是一个“按值传递”，唯一的区别是你传递的值是一个地址而不是整数。地址也是值; 这是正在复制并通过帧传递给函数调用者的内容。\n\n由于正在复制和传递地址的值，因此需要在`increment`帧内设置一个变量来接收和存储这个整数的地址。这就是整型指针变量的声明在第18行出现的地方。\n\n## Listing 12\n```\n18 func increment(inc *int) {\n```\n\n如果要传递`User`值的地址，则需要将变量声明为`*User`。即使所有指针变量都存储地址值，它们也不能传递任何地址，只能传递与指针类型关联的地址。这是关键，共享一个值的原因是因为接收函数需要对该值执行读写操作。你需要任何值的类型信息才能对其进行读写。编译器将确保只有与正确指针类型关联的值与该函数共享。\n\n这是函数调用increment后栈的样子:\n## Figure 5\n![image.png](https://upload-images.jianshu.io/upload_images/44480-61d79b5c0754f31b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在图5中可以看到，当使用地址作为值执行“传递值”时，栈是什么样子的。`increment`函数帧的指针变量现在指向`count`变量，它位于`main`所在的帧内。\n\n现在使用指针变量，函数可以对`main`帧内的`count`变量执行间接的读修改写操作。\n\n## Listing 13\n```\n21    *inc++\n```\n这一次，*字符充当操作符并应用于指针变量。使用*作为运算符意味着，“指针指向的值”。指针变量允许在使用它的函数帧之外间接访问内存。有时这种间接的读或写被称为取消指针引用。`increment`函数在它的帧内仍然必须有一个指针变量，它可以直接读取来执行间接访问。\n\n现在，在图6中，你可以看到第21行执行之后的栈是什么样子的。\n\n## Figure 6\n![image.png](https://upload-images.jianshu.io/upload_images/44480-c5bcd92c558e97a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n以下是输出数据\n## Listing 14\n\n```\ncount:  Value Of[ 10 ]   \t   \tAddr Of[ 0x10429fa4 ]\ninc:    Value Of[ 0x10429fa4 ]  Addr Of[ 0x10429f98 ]   Value Points To[ 11 ]\ncount:  Value Of[ 11 ]   \t   \tAddr Of[ 0x10429fa4 ]\n```\n\n你可以看到，`inc`指针变量的“值”与计数变量的“地址”相同。这样就建立了共享关系，允许对帧之外的内存进行间接访问。当`increment`函数通过指针执行写操作时，`main`函数会在返回时看到更改。\n\n# 指针没什么特别\n\n指针变量并不特殊，因为它与其他变量一样都只是变量而已。它们有一个内存分配和一个值。所有的指针变量，不管它们指向的值是什么类型，大小和表示方式都是一样的。令人困惑的是`*`字符在代码中充当操作符，用于声明指针类型。\n\n# 总结\n这篇文章描述了指针背后的目的，以及栈和指针机制如何在`Go`中工作，如果你理解了这种设计的理念与机制，恭喜你，在编写简洁高效代码的的旅途中，你迈出了第一步。\n\n总之，看到这里，你可以学到许多:\n\n- 函数在帧边界范围内执行，帧为每个单独的函数提供单独的内存空间。\n- 当调用一个函数时，在两个帧之间会产生交互。\n- **按值**传递数据的好处是可读性。\n- 栈很重要，因为它为每个单独的函数提供了有边界的物理内存空间。\n- 活动帧以下的所有栈内存都无效，但活动帧以上的内存是有效的。\n- 调用函数意味着`goroutine`需要在堆栈上开辟一段新的内存空间。\n- 在每次函数调用期间，在获取帧时，该帧的堆栈内存将被清除（覆盖）。\n- 指针的意义，即与函数共享一个值，以便函数可以读写该值，即使该值并不直接存在于其所在帧中。\n- 对于由你或语言本身声明的每一种类型，你都可以免费获得用于共享的恭维指针类型。\n- 指针变量允许在使用它的函数的帧之外间接访问内存。\n- 指针变量并不特殊，因为它们和其他变量一样都是变量。它们有一个内存分配和一个值。\n---\n版权声明：\n\n1. 任何个人或机构如需转载本文，无须再获得作者书面授权，但是转载者必须保留作者署名，并注明出处。\n\n2. 作者保留对本文的修改权。他人未经作者许可，不得擅自修改，破坏作品的完整性。\n\n3. 作者保留对本文的其他各项著作权权利。\n\n原文阅读：\n[Language Mechanics On Stacks And Pointers\n](https://www.ardanlabs.com/blog/2017/05/language-mechanics-on-stacks-and-pointers.html)","source":"_posts/Go语言的栈和指针机制.md","raw":"---\ntitle: 'Go语言的栈和指针机制 '\ndate: 2018-09-11 11:32:32\ntags:\n---\n\n阅读前请悉知：本文是一篇翻译文章，出于对原文的喜爱与敬畏，所以需要强调：如果读者英文阅读能力好，请直接移步文末原文链接；如果对这篇翻译所述知识感兴趣，也请一定要再看下英文原文，加深理解。翻译中为了表达的需要，加入了自己的一些理解，不过因为知识有限，翻译过程难免纰漏，如有问题，欢迎留言指正。\n\n# 介绍\n我不想夸赞指针，因为它很难理解，如若使用不当，极易造成bug, 甚至引发性能问题，这在编写并发或者多线程软件时，显的尤为突出。也就难怪许多编程语言都试图对程序员隐藏指针特性了。但是，当使用Go编写软件，你是没有办法避开指针的。如果对指针没有深入的理解，你将很难写出简洁高效的代码。\n\n# 帧（边界）\n函数在独立的内存空间（帧）执行，而这个独立的内存空间是有边界的，这个边界我们称之为帧边界。每个帧都允许函数在自己的上下文中运行，并提供流量控制(flow control, 暂且这么翻译)。\n函数只能直接访问帧内的内存，帧外的内存不能间接访问。如果函数需要访问帧外的存储空间，则该内存必须与函数共享。为了理解接下来的内容，我们需要首先理解帧概念和机制。（我的理解是：帧是一段有限的供函数运行的内存块）\n\n当一个函数被调用，会有两个帧发生交互, 即：代码从调用函数的帧转换到被调用函数的帧，如果函数调用需要传递数据，那么该数据必须从一个帧传递到另一个帧。在Go中，数据在两帧之间是**按值**传递的。\n\n**按值**传递的提高了代码的可读性。函数调用中数据值从一个函数复制传递，另一个函数接收到这个值，整个过程很直观，所以你写代码时不必为了可读性而特意掩盖函数间交互的过程，因为它就是这么直观，因而这种直观可以帮助你理解每个函数调用是在如何影响程序运行的。\n\n## Listing 1\n```\n01 package main\n02\n03 func main() {\n04\n05    // Declare variable of type int with a value of 10.\n06    count := 10\n07\n08    // Display the \"value of\" and \"address of\" count.\n09    println(\"count:\\tValue Of[\", count, \"]\\tAddr Of[\", &count, \"]\")\n10\n11    // Pass the \"value of\" the count.\n12    increment(count)\n13\n14    println(\"count:\\tValue Of[\", count, \"]\\tAddr Of[\", &count, \"]\")\n15 }\n16\n17 //go:noinline\n18 func increment(inc int) {\n19\n20    // Increment the \"value of\" inc.\n21    inc++\n22    println(\"inc:\\tValue Of[\", inc, \"]\\tAddr Of[\", &inc, \"]\")\n23 }\n```\n当你执行以上代码时，golang中`runtime`会创建一个主`goroutine`，这个主`goroutine`会开始执行所有的`main`函数内所有代码的初始化。需要明白的是，`goroutine`是挂在操作系统线程上的，该线程最终在机器的某个核心上执行。在1.8版本中，每个`goroutine`都有一个初始化大小为2048个字节的连续内存块，这构成了它的堆栈空间。这个初始堆栈大小在过去几年发生了变化，将来可能会再次发生变化。\n\n栈很重要，因为它为每个单独的函数提供了有限的物理内存空间。在主`goroutine`执行清单1中的主函数时，`goroutine`的栈是以下这样\n\n## Figure 1\n![image.png](https://upload-images.jianshu.io/upload_images/44480-b255d954cb7affb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n你可以在图1中看到，栈的一部分已经被主函数所占据，即`main`所属的内存帧（帧在栈上分配的），这个方框表示栈上的主函数边界。帧的范围作为调用函数时执行的代码的一部分建立。你还可以看到`count`变量的内存已经放在main所在帧的地址0x10429fa4上。\n\n图1还说明了另一个有趣的问题。活动帧以下的所有栈内存都无效，但活动帧以上的栈内存是有效的。我需要明确帧的有效部分和无效部分之间的界限（是否有被使用）。\n\n# 地址\n\n变量的作用是特定的内存位置赋予名字，以提高代码的可读性，并帮助你分析正在使用的数据。如果你有一个变量，那么对应内存中一个值，如果内存中有一个值，那么它必须有一个地址。在第09行，主函数调用内置函数println来显示`count`变量的“值”和“地址”。\n\n## Listing 2\n\n```\n09    println(\"count:\\tValue Of[\", count, \"]\\tAddr Of[\", &count, \"]\")\n```\n使用&运算符来获取变量位置的地址并不新奇，其它语言也使用这个运算符。第09行的输出应该类似于下面的输出，如果你在一个32位架构(如游乐场)上运行代码:\n\n## Listing 3\n```\ncount:  Value Of[ 10 ]  Addr Of[ 0x10429fa4 ]\n```\n\n# 函数调用\n\n在第12行上，`main`函数调用了`increment`函数。\n\n## Listing 4\n```\n12    increment(count)\n```\n调用函数意味着`goroutine`需要在栈上开辟一个新的内存空间。然而事情要可能比你想像的还要复杂一些哦。要成功地进行此函数调用，需要在转换过程中在两个帧之间传递数据。具体地说，一个整数值将在调用期间被复制和传递。通过查看第18行上的`increment`函数的声明，你可以看到这一点。\n\n## Listing 5\n\n```\n18 func increment(inc int) {\n```\n如果你在第12行再次看到递增的函数调用，你会看到代码正在传递`count`变量的“值”。该值将被复制、传递给`increment`函数所在的帧中。记住，`increment`函数只能在它自己的空间内直接读写内存，因此它需要`inc`变量接收、存储和访问它自己传递的`count`值的副本。\n\n在`increment`函数内部的代码开始执行之前，`goroutine`的栈看起来是这样的:\nFigure 2\n![image.png](https://upload-images.jianshu.io/upload_images/44480-0c74d10a3c1675b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以看到栈上现在有两个帧，一个是`main`，一个`increment`。在`increment`的帧中，你可以看到`inc`变量，它包含在函数调用期间复制和传递的值10。`inc`变量的地址是0x10429f98，内存更小，因为帧在栈中是由高地址向低地址扩展的，不过这只是一个实现细节，没有任何意义。重要的是`goroutine`从`main`的帧中获取`count`的值，并使用`inc`变量在帧中存储了该值的副本。\n\n`increment`函数中的其余代码显示`inc`变量的“值”和“地址”。\n\n## Listing 6\n```\n21    inc++\n22    println(\"inc:\\tValue Of[\", inc, \"]\\tAddr Of[\", &inc, \"]\")\n```\n22行的输出如下\n## Listing 7\n```\ninc:    Value Of[ 11 ]  Addr Of[ 0x10429f98 ]\n```\n这是在执行到第22行后栈的样子:\n## Figure 3\n![image.png](https://upload-images.jianshu.io/upload_images/44480-03d0709e82b2e9df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n执行第21和22行之后，`increment`函数返回到`main`函数。然后主函数在第14行再次`count`变量的“值”和“地址”。\n\n## Listing 8\n\n```\n14    println(\"count:\\tValue Of[\",count, \"]\\tAddr Of[\", &count, \"]\")\n```\n输出如下如示\n```\ncount:  Value Of[ 10 ]  Addr Of[ 0x10429fa4 ]\ninc:    Value Of[ 11 ]  Addr Of[ 0x10429f98 ]\ncount:  Value Of[ 10 ]  Addr Of[ 0x10429fa4 ]\n```\n`main`所在帧中`count`的值在调用`increment`前后相同。\n\n# 函数返回\n\n当一个函数返回到调用方函数时，栈上的内存实际发生了什么?其实什么都没有。这是`increment`函数执行完成返回后栈的样子:\n## Figure 4\n![image.png](https://upload-images.jianshu.io/upload_images/44480-47c7323bcebfdd41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n与图3几乎完全相同，只是`increment`函数关联的帧现在被认为是无效内存。这是因为`main`的帧现在是活动帧。`increment`函数所在的帧在内存中保持不变，此时它是非活动帧。\n\n清理返回函数的帧的内存会浪费时间，因为你不知道是否还需要这个内存。所以内存就保持原样了。在每次函数调用期间，在获取帧时，该帧的栈内存将被清除。这是通过初始化放置在帧中的任何值来完成的。因为所有的值都被初始化为至少它们的“零值”，所以栈在每次函数调用时都会自动清理。\n（这里我理解因为每个帧其实是有边界的，程序运行时知道此时帧的边界在哪里，比如若此时`main`调用另一个函数`increment2`,可能会占据原`increment`的帧，完成初始化，相当于是覆盖了）\n\n# 共享\n\n有什么办法能让`increment`函数直接操作`main`的帧中存在的`count`变量呢?答案是指针。指针的存在只有一个目的，即与函数共享一个值，以便函数可以读写该值，即使该值并不直接存在于其自身的帧中。\n\n如果你不知道共享，你就不需要使用指针。学习指针时，重要的是要使用清晰的词汇表，而不是操作符或语法。所以请记住，指针是用于共享的，并在你读取代码时将`&`操作符替换为“共享”。\n\n# 指针类型\n\nGo有许多内置类型， 这些内置类型都能很方便的声明为指针类型。比如已经存在一个名为`int`的内置类型，因此有一个指针类型称为`*int`。如果声明了一个名为`User`的类型，就可以获得一个名为`*User`的指针类型。\n\n所有指针类型都具有相同的两个特征。首先，他们从角色*开始。其次，它们都具有相同的内存大小和表示形式，即表示地址的4或8字节。在32位架构上，指针需要4字节的内存，而在64位架构(如你的机器)上，它们需要8字节的内存。\n\n# 间接访问内存\n\n看看这个小程序，它执行一个函数调用，通过**按值**传递地址。这将与`increment`函数共享`main`的帧中的`count`变量\n\n## Listing 10\n```\n01 package main\n02\n03 func main() {\n04\n05    // Declare variable of type int with a value of 10.\n06    count := 10\n07\n08    // Display the \"value of\" and \"address of\" count.\n09    println(\"count:\\tValue Of[\", count, \"]\\t\\tAddr Of[\", &count, \"]\")\n10\n11    // Pass the \"address of\" count.\n12    increment(&count)\n13\n14    println(\"count:\\tValue Of[\", count, \"]\\t\\tAddr Of[\", &count, \"]\")\n15 }\n16\n17 //go:noinline\n18 func increment(inc *int) {\n19\n20    // Increment the \"value of\" count that the \"pointer points to\". (dereferencing)\n21    *inc++\n22    println(\"inc:\\tValue Of[\", inc, \"]\\tAddr Of[\", &inc, \"]\\tValue Points To[\", *inc, \"]\")\n23 }\n```\n\n从最初的程序中，有三个有趣的变化。这是第12行上的第一个变化\n## Listing 11\n```\n12    increment(&count)\n```\n这一次在第12行，代码不是复制和传递计数的“值”，而是传递计数的“地址”。现在你可以说，我正在与`increment`函数“共享”`count`变量。这就是`&`操作符功能：“共享”。\n\n请理解这仍然是一个“按值传递”，唯一的区别是你传递的值是一个地址而不是整数。地址也是值; 这是正在复制并通过帧传递给函数调用者的内容。\n\n由于正在复制和传递地址的值，因此需要在`increment`帧内设置一个变量来接收和存储这个整数的地址。这就是整型指针变量的声明在第18行出现的地方。\n\n## Listing 12\n```\n18 func increment(inc *int) {\n```\n\n如果要传递`User`值的地址，则需要将变量声明为`*User`。即使所有指针变量都存储地址值，它们也不能传递任何地址，只能传递与指针类型关联的地址。这是关键，共享一个值的原因是因为接收函数需要对该值执行读写操作。你需要任何值的类型信息才能对其进行读写。编译器将确保只有与正确指针类型关联的值与该函数共享。\n\n这是函数调用increment后栈的样子:\n## Figure 5\n![image.png](https://upload-images.jianshu.io/upload_images/44480-61d79b5c0754f31b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在图5中可以看到，当使用地址作为值执行“传递值”时，栈是什么样子的。`increment`函数帧的指针变量现在指向`count`变量，它位于`main`所在的帧内。\n\n现在使用指针变量，函数可以对`main`帧内的`count`变量执行间接的读修改写操作。\n\n## Listing 13\n```\n21    *inc++\n```\n这一次，*字符充当操作符并应用于指针变量。使用*作为运算符意味着，“指针指向的值”。指针变量允许在使用它的函数帧之外间接访问内存。有时这种间接的读或写被称为取消指针引用。`increment`函数在它的帧内仍然必须有一个指针变量，它可以直接读取来执行间接访问。\n\n现在，在图6中，你可以看到第21行执行之后的栈是什么样子的。\n\n## Figure 6\n![image.png](https://upload-images.jianshu.io/upload_images/44480-c5bcd92c558e97a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n以下是输出数据\n## Listing 14\n\n```\ncount:  Value Of[ 10 ]   \t   \tAddr Of[ 0x10429fa4 ]\ninc:    Value Of[ 0x10429fa4 ]  Addr Of[ 0x10429f98 ]   Value Points To[ 11 ]\ncount:  Value Of[ 11 ]   \t   \tAddr Of[ 0x10429fa4 ]\n```\n\n你可以看到，`inc`指针变量的“值”与计数变量的“地址”相同。这样就建立了共享关系，允许对帧之外的内存进行间接访问。当`increment`函数通过指针执行写操作时，`main`函数会在返回时看到更改。\n\n# 指针没什么特别\n\n指针变量并不特殊，因为它与其他变量一样都只是变量而已。它们有一个内存分配和一个值。所有的指针变量，不管它们指向的值是什么类型，大小和表示方式都是一样的。令人困惑的是`*`字符在代码中充当操作符，用于声明指针类型。\n\n# 总结\n这篇文章描述了指针背后的目的，以及栈和指针机制如何在`Go`中工作，如果你理解了这种设计的理念与机制，恭喜你，在编写简洁高效代码的的旅途中，你迈出了第一步。\n\n总之，看到这里，你可以学到许多:\n\n- 函数在帧边界范围内执行，帧为每个单独的函数提供单独的内存空间。\n- 当调用一个函数时，在两个帧之间会产生交互。\n- **按值**传递数据的好处是可读性。\n- 栈很重要，因为它为每个单独的函数提供了有边界的物理内存空间。\n- 活动帧以下的所有栈内存都无效，但活动帧以上的内存是有效的。\n- 调用函数意味着`goroutine`需要在堆栈上开辟一段新的内存空间。\n- 在每次函数调用期间，在获取帧时，该帧的堆栈内存将被清除（覆盖）。\n- 指针的意义，即与函数共享一个值，以便函数可以读写该值，即使该值并不直接存在于其所在帧中。\n- 对于由你或语言本身声明的每一种类型，你都可以免费获得用于共享的恭维指针类型。\n- 指针变量允许在使用它的函数的帧之外间接访问内存。\n- 指针变量并不特殊，因为它们和其他变量一样都是变量。它们有一个内存分配和一个值。\n---\n版权声明：\n\n1. 任何个人或机构如需转载本文，无须再获得作者书面授权，但是转载者必须保留作者署名，并注明出处。\n\n2. 作者保留对本文的修改权。他人未经作者许可，不得擅自修改，破坏作品的完整性。\n\n3. 作者保留对本文的其他各项著作权权利。\n\n原文阅读：\n[Language Mechanics On Stacks And Pointers\n](https://www.ardanlabs.com/blog/2017/05/language-mechanics-on-stacks-and-pointers.html)","slug":"Go语言的栈和指针机制","published":1,"updated":"2018-09-19T01:33:25.005Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm8inilr0003rwxsnsmrk2eh","content":"<p>阅读前请悉知：本文是一篇翻译文章，出于对原文的喜爱与敬畏，所以需要强调：如果读者英文阅读能力好，请直接移步文末原文链接；如果对这篇翻译所述知识感兴趣，也请一定要再看下英文原文，加深理解。翻译中为了表达的需要，加入了自己的一些理解，不过因为知识有限，翻译过程难免纰漏，如有问题，欢迎留言指正。</p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>我不想夸赞指针，因为它很难理解，如若使用不当，极易造成bug, 甚至引发性能问题，这在编写并发或者多线程软件时，显的尤为突出。也就难怪许多编程语言都试图对程序员隐藏指针特性了。但是，当使用Go编写软件，你是没有办法避开指针的。如果对指针没有深入的理解，你将很难写出简洁高效的代码。</p>\n<h1 id=\"帧（边界）\"><a href=\"#帧（边界）\" class=\"headerlink\" title=\"帧（边界）\"></a>帧（边界）</h1><p>函数在独立的内存空间（帧）执行，而这个独立的内存空间是有边界的，这个边界我们称之为帧边界。每个帧都允许函数在自己的上下文中运行，并提供流量控制(flow control, 暂且这么翻译)。<br>函数只能直接访问帧内的内存，帧外的内存不能间接访问。如果函数需要访问帧外的存储空间，则该内存必须与函数共享。为了理解接下来的内容，我们需要首先理解帧概念和机制。（我的理解是：帧是一段有限的供函数运行的内存块）</p>\n<p>当一个函数被调用，会有两个帧发生交互, 即：代码从调用函数的帧转换到被调用函数的帧，如果函数调用需要传递数据，那么该数据必须从一个帧传递到另一个帧。在Go中，数据在两帧之间是<strong>按值</strong>传递的。</p>\n<p><strong>按值</strong>传递的提高了代码的可读性。函数调用中数据值从一个函数复制传递，另一个函数接收到这个值，整个过程很直观，所以你写代码时不必为了可读性而特意掩盖函数间交互的过程，因为它就是这么直观，因而这种直观可以帮助你理解每个函数调用是在如何影响程序运行的。</p>\n<h2 id=\"Listing-1\"><a href=\"#Listing-1\" class=\"headerlink\" title=\"Listing 1\"></a>Listing 1</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">01 package main</span><br><span class=\"line\">02</span><br><span class=\"line\">03 func main() &#123;</span><br><span class=\"line\">04</span><br><span class=\"line\">05    // Declare variable of type int with a value of 10.</span><br><span class=\"line\">06    count := 10</span><br><span class=\"line\">07</span><br><span class=\"line\">08    // Display the &quot;value of&quot; and &quot;address of&quot; count.</span><br><span class=\"line\">09    println(&quot;count:\\tValue Of[&quot;, count, &quot;]\\tAddr Of[&quot;, &amp;count, &quot;]&quot;)</span><br><span class=\"line\">10</span><br><span class=\"line\">11    // Pass the &quot;value of&quot; the count.</span><br><span class=\"line\">12    increment(count)</span><br><span class=\"line\">13</span><br><span class=\"line\">14    println(&quot;count:\\tValue Of[&quot;, count, &quot;]\\tAddr Of[&quot;, &amp;count, &quot;]&quot;)</span><br><span class=\"line\">15 &#125;</span><br><span class=\"line\">16</span><br><span class=\"line\">17 //go:noinline</span><br><span class=\"line\">18 func increment(inc int) &#123;</span><br><span class=\"line\">19</span><br><span class=\"line\">20    // Increment the &quot;value of&quot; inc.</span><br><span class=\"line\">21    inc++</span><br><span class=\"line\">22    println(&quot;inc:\\tValue Of[&quot;, inc, &quot;]\\tAddr Of[&quot;, &amp;inc, &quot;]&quot;)</span><br><span class=\"line\">23 &#125;</span><br></pre></td></tr></table></figure>\n<p>当你执行以上代码时，golang中<code>runtime</code>会创建一个主<code>goroutine</code>，这个主<code>goroutine</code>会开始执行所有的<code>main</code>函数内所有代码的初始化。需要明白的是，<code>goroutine</code>是挂在操作系统线程上的，该线程最终在机器的某个核心上执行。在1.8版本中，每个<code>goroutine</code>都有一个初始化大小为2048个字节的连续内存块，这构成了它的堆栈空间。这个初始堆栈大小在过去几年发生了变化，将来可能会再次发生变化。</p>\n<p>栈很重要，因为它为每个单独的函数提供了有限的物理内存空间。在主<code>goroutine</code>执行清单1中的主函数时，<code>goroutine</code>的栈是以下这样</p>\n<h2 id=\"Figure-1\"><a href=\"#Figure-1\" class=\"headerlink\" title=\"Figure 1\"></a>Figure 1</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/44480-b255d954cb7affb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>你可以在图1中看到，栈的一部分已经被主函数所占据，即<code>main</code>所属的内存帧（帧在栈上分配的），这个方框表示栈上的主函数边界。帧的范围作为调用函数时执行的代码的一部分建立。你还可以看到<code>count</code>变量的内存已经放在main所在帧的地址0x10429fa4上。</p>\n<p>图1还说明了另一个有趣的问题。活动帧以下的所有栈内存都无效，但活动帧以上的栈内存是有效的。我需要明确帧的有效部分和无效部分之间的界限（是否有被使用）。</p>\n<h1 id=\"地址\"><a href=\"#地址\" class=\"headerlink\" title=\"地址\"></a>地址</h1><p>变量的作用是特定的内存位置赋予名字，以提高代码的可读性，并帮助你分析正在使用的数据。如果你有一个变量，那么对应内存中一个值，如果内存中有一个值，那么它必须有一个地址。在第09行，主函数调用内置函数println来显示<code>count</code>变量的“值”和“地址”。</p>\n<h2 id=\"Listing-2\"><a href=\"#Listing-2\" class=\"headerlink\" title=\"Listing 2\"></a>Listing 2</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">09    println(&quot;count:\\tValue Of[&quot;, count, &quot;]\\tAddr Of[&quot;, &amp;count, &quot;]&quot;)</span><br></pre></td></tr></table></figure>\n<p>使用&amp;运算符来获取变量位置的地址并不新奇，其它语言也使用这个运算符。第09行的输出应该类似于下面的输出，如果你在一个32位架构(如游乐场)上运行代码:</p>\n<h2 id=\"Listing-3\"><a href=\"#Listing-3\" class=\"headerlink\" title=\"Listing 3\"></a>Listing 3</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count:  Value Of[ 10 ]  Addr Of[ 0x10429fa4 ]</span><br></pre></td></tr></table></figure>\n<h1 id=\"函数调用\"><a href=\"#函数调用\" class=\"headerlink\" title=\"函数调用\"></a>函数调用</h1><p>在第12行上，<code>main</code>函数调用了<code>increment</code>函数。</p>\n<h2 id=\"Listing-4\"><a href=\"#Listing-4\" class=\"headerlink\" title=\"Listing 4\"></a>Listing 4</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">12    increment(count)</span><br></pre></td></tr></table></figure>\n<p>调用函数意味着<code>goroutine</code>需要在栈上开辟一个新的内存空间。然而事情要可能比你想像的还要复杂一些哦。要成功地进行此函数调用，需要在转换过程中在两个帧之间传递数据。具体地说，一个整数值将在调用期间被复制和传递。通过查看第18行上的<code>increment</code>函数的声明，你可以看到这一点。</p>\n<h2 id=\"Listing-5\"><a href=\"#Listing-5\" class=\"headerlink\" title=\"Listing 5\"></a>Listing 5</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">18 func increment(inc int) &#123;</span><br></pre></td></tr></table></figure>\n<p>如果你在第12行再次看到递增的函数调用，你会看到代码正在传递<code>count</code>变量的“值”。该值将被复制、传递给<code>increment</code>函数所在的帧中。记住，<code>increment</code>函数只能在它自己的空间内直接读写内存，因此它需要<code>inc</code>变量接收、存储和访问它自己传递的<code>count</code>值的副本。</p>\n<p>在<code>increment</code>函数内部的代码开始执行之前，<code>goroutine</code>的栈看起来是这样的:<br>Figure 2<br><img src=\"https://upload-images.jianshu.io/upload_images/44480-0c74d10a3c1675b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>可以看到栈上现在有两个帧，一个是<code>main</code>，一个<code>increment</code>。在<code>increment</code>的帧中，你可以看到<code>inc</code>变量，它包含在函数调用期间复制和传递的值10。<code>inc</code>变量的地址是0x10429f98，内存更小，因为帧在栈中是由高地址向低地址扩展的，不过这只是一个实现细节，没有任何意义。重要的是<code>goroutine</code>从<code>main</code>的帧中获取<code>count</code>的值，并使用<code>inc</code>变量在帧中存储了该值的副本。</p>\n<p><code>increment</code>函数中的其余代码显示<code>inc</code>变量的“值”和“地址”。</p>\n<h2 id=\"Listing-6\"><a href=\"#Listing-6\" class=\"headerlink\" title=\"Listing 6\"></a>Listing 6</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">21    inc++</span><br><span class=\"line\">22    println(&quot;inc:\\tValue Of[&quot;, inc, &quot;]\\tAddr Of[&quot;, &amp;inc, &quot;]&quot;)</span><br></pre></td></tr></table></figure>\n<p>22行的输出如下</p>\n<h2 id=\"Listing-7\"><a href=\"#Listing-7\" class=\"headerlink\" title=\"Listing 7\"></a>Listing 7</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inc:    Value Of[ 11 ]  Addr Of[ 0x10429f98 ]</span><br></pre></td></tr></table></figure>\n<p>这是在执行到第22行后栈的样子:</p>\n<h2 id=\"Figure-3\"><a href=\"#Figure-3\" class=\"headerlink\" title=\"Figure 3\"></a>Figure 3</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/44480-03d0709e82b2e9df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>执行第21和22行之后，<code>increment</code>函数返回到<code>main</code>函数。然后主函数在第14行再次<code>count</code>变量的“值”和“地址”。</p>\n<h2 id=\"Listing-8\"><a href=\"#Listing-8\" class=\"headerlink\" title=\"Listing 8\"></a>Listing 8</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">14    println(&quot;count:\\tValue Of[&quot;,count, &quot;]\\tAddr Of[&quot;, &amp;count, &quot;]&quot;)</span><br></pre></td></tr></table></figure>\n<p>输出如下如示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count:  Value Of[ 10 ]  Addr Of[ 0x10429fa4 ]</span><br><span class=\"line\">inc:    Value Of[ 11 ]  Addr Of[ 0x10429f98 ]</span><br><span class=\"line\">count:  Value Of[ 10 ]  Addr Of[ 0x10429fa4 ]</span><br></pre></td></tr></table></figure></p>\n<p><code>main</code>所在帧中<code>count</code>的值在调用<code>increment</code>前后相同。</p>\n<h1 id=\"函数返回\"><a href=\"#函数返回\" class=\"headerlink\" title=\"函数返回\"></a>函数返回</h1><p>当一个函数返回到调用方函数时，栈上的内存实际发生了什么?其实什么都没有。这是<code>increment</code>函数执行完成返回后栈的样子:</p>\n<h2 id=\"Figure-4\"><a href=\"#Figure-4\" class=\"headerlink\" title=\"Figure 4\"></a>Figure 4</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/44480-47c7323bcebfdd41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>与图3几乎完全相同，只是<code>increment</code>函数关联的帧现在被认为是无效内存。这是因为<code>main</code>的帧现在是活动帧。<code>increment</code>函数所在的帧在内存中保持不变，此时它是非活动帧。</p>\n<p>清理返回函数的帧的内存会浪费时间，因为你不知道是否还需要这个内存。所以内存就保持原样了。在每次函数调用期间，在获取帧时，该帧的栈内存将被清除。这是通过初始化放置在帧中的任何值来完成的。因为所有的值都被初始化为至少它们的“零值”，所以栈在每次函数调用时都会自动清理。<br>（这里我理解因为每个帧其实是有边界的，程序运行时知道此时帧的边界在哪里，比如若此时<code>main</code>调用另一个函数<code>increment2</code>,可能会占据原<code>increment</code>的帧，完成初始化，相当于是覆盖了）</p>\n<h1 id=\"共享\"><a href=\"#共享\" class=\"headerlink\" title=\"共享\"></a>共享</h1><p>有什么办法能让<code>increment</code>函数直接操作<code>main</code>的帧中存在的<code>count</code>变量呢?答案是指针。指针的存在只有一个目的，即与函数共享一个值，以便函数可以读写该值，即使该值并不直接存在于其自身的帧中。</p>\n<p>如果你不知道共享，你就不需要使用指针。学习指针时，重要的是要使用清晰的词汇表，而不是操作符或语法。所以请记住，指针是用于共享的，并在你读取代码时将<code>&amp;</code>操作符替换为“共享”。</p>\n<h1 id=\"指针类型\"><a href=\"#指针类型\" class=\"headerlink\" title=\"指针类型\"></a>指针类型</h1><p>Go有许多内置类型， 这些内置类型都能很方便的声明为指针类型。比如已经存在一个名为<code>int</code>的内置类型，因此有一个指针类型称为<code>*int</code>。如果声明了一个名为<code>User</code>的类型，就可以获得一个名为<code>*User</code>的指针类型。</p>\n<p>所有指针类型都具有相同的两个特征。首先，他们从角色*开始。其次，它们都具有相同的内存大小和表示形式，即表示地址的4或8字节。在32位架构上，指针需要4字节的内存，而在64位架构(如你的机器)上，它们需要8字节的内存。</p>\n<h1 id=\"间接访问内存\"><a href=\"#间接访问内存\" class=\"headerlink\" title=\"间接访问内存\"></a>间接访问内存</h1><p>看看这个小程序，它执行一个函数调用，通过<strong>按值</strong>传递地址。这将与<code>increment</code>函数共享<code>main</code>的帧中的<code>count</code>变量</p>\n<h2 id=\"Listing-10\"><a href=\"#Listing-10\" class=\"headerlink\" title=\"Listing 10\"></a>Listing 10</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">01 package main</span><br><span class=\"line\">02</span><br><span class=\"line\">03 func main() &#123;</span><br><span class=\"line\">04</span><br><span class=\"line\">05    // Declare variable of type int with a value of 10.</span><br><span class=\"line\">06    count := 10</span><br><span class=\"line\">07</span><br><span class=\"line\">08    // Display the &quot;value of&quot; and &quot;address of&quot; count.</span><br><span class=\"line\">09    println(&quot;count:\\tValue Of[&quot;, count, &quot;]\\t\\tAddr Of[&quot;, &amp;count, &quot;]&quot;)</span><br><span class=\"line\">10</span><br><span class=\"line\">11    // Pass the &quot;address of&quot; count.</span><br><span class=\"line\">12    increment(&amp;count)</span><br><span class=\"line\">13</span><br><span class=\"line\">14    println(&quot;count:\\tValue Of[&quot;, count, &quot;]\\t\\tAddr Of[&quot;, &amp;count, &quot;]&quot;)</span><br><span class=\"line\">15 &#125;</span><br><span class=\"line\">16</span><br><span class=\"line\">17 //go:noinline</span><br><span class=\"line\">18 func increment(inc *int) &#123;</span><br><span class=\"line\">19</span><br><span class=\"line\">20    // Increment the &quot;value of&quot; count that the &quot;pointer points to&quot;. (dereferencing)</span><br><span class=\"line\">21    *inc++</span><br><span class=\"line\">22    println(&quot;inc:\\tValue Of[&quot;, inc, &quot;]\\tAddr Of[&quot;, &amp;inc, &quot;]\\tValue Points To[&quot;, *inc, &quot;]&quot;)</span><br><span class=\"line\">23 &#125;</span><br></pre></td></tr></table></figure>\n<p>从最初的程序中，有三个有趣的变化。这是第12行上的第一个变化</p>\n<h2 id=\"Listing-11\"><a href=\"#Listing-11\" class=\"headerlink\" title=\"Listing 11\"></a>Listing 11</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">12    increment(&amp;count)</span><br></pre></td></tr></table></figure>\n<p>这一次在第12行，代码不是复制和传递计数的“值”，而是传递计数的“地址”。现在你可以说，我正在与<code>increment</code>函数“共享”<code>count</code>变量。这就是<code>&amp;</code>操作符功能：“共享”。</p>\n<p>请理解这仍然是一个“按值传递”，唯一的区别是你传递的值是一个地址而不是整数。地址也是值; 这是正在复制并通过帧传递给函数调用者的内容。</p>\n<p>由于正在复制和传递地址的值，因此需要在<code>increment</code>帧内设置一个变量来接收和存储这个整数的地址。这就是整型指针变量的声明在第18行出现的地方。</p>\n<h2 id=\"Listing-12\"><a href=\"#Listing-12\" class=\"headerlink\" title=\"Listing 12\"></a>Listing 12</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">18 func increment(inc *int) &#123;</span><br></pre></td></tr></table></figure>\n<p>如果要传递<code>User</code>值的地址，则需要将变量声明为<code>*User</code>。即使所有指针变量都存储地址值，它们也不能传递任何地址，只能传递与指针类型关联的地址。这是关键，共享一个值的原因是因为接收函数需要对该值执行读写操作。你需要任何值的类型信息才能对其进行读写。编译器将确保只有与正确指针类型关联的值与该函数共享。</p>\n<p>这是函数调用increment后栈的样子:</p>\n<h2 id=\"Figure-5\"><a href=\"#Figure-5\" class=\"headerlink\" title=\"Figure 5\"></a>Figure 5</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/44480-61d79b5c0754f31b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>在图5中可以看到，当使用地址作为值执行“传递值”时，栈是什么样子的。<code>increment</code>函数帧的指针变量现在指向<code>count</code>变量，它位于<code>main</code>所在的帧内。</p>\n<p>现在使用指针变量，函数可以对<code>main</code>帧内的<code>count</code>变量执行间接的读修改写操作。</p>\n<h2 id=\"Listing-13\"><a href=\"#Listing-13\" class=\"headerlink\" title=\"Listing 13\"></a>Listing 13</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">21    *inc++</span><br></pre></td></tr></table></figure>\n<p>这一次，<em>字符充当操作符并应用于指针变量。使用</em>作为运算符意味着，“指针指向的值”。指针变量允许在使用它的函数帧之外间接访问内存。有时这种间接的读或写被称为取消指针引用。<code>increment</code>函数在它的帧内仍然必须有一个指针变量，它可以直接读取来执行间接访问。</p>\n<p>现在，在图6中，你可以看到第21行执行之后的栈是什么样子的。</p>\n<h2 id=\"Figure-6\"><a href=\"#Figure-6\" class=\"headerlink\" title=\"Figure 6\"></a>Figure 6</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/44480-c5bcd92c558e97a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>以下是输出数据</p>\n<h2 id=\"Listing-14\"><a href=\"#Listing-14\" class=\"headerlink\" title=\"Listing 14\"></a>Listing 14</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count:  Value Of[ 10 ]   \t   \tAddr Of[ 0x10429fa4 ]</span><br><span class=\"line\">inc:    Value Of[ 0x10429fa4 ]  Addr Of[ 0x10429f98 ]   Value Points To[ 11 ]</span><br><span class=\"line\">count:  Value Of[ 11 ]   \t   \tAddr Of[ 0x10429fa4 ]</span><br></pre></td></tr></table></figure>\n<p>你可以看到，<code>inc</code>指针变量的“值”与计数变量的“地址”相同。这样就建立了共享关系，允许对帧之外的内存进行间接访问。当<code>increment</code>函数通过指针执行写操作时，<code>main</code>函数会在返回时看到更改。</p>\n<h1 id=\"指针没什么特别\"><a href=\"#指针没什么特别\" class=\"headerlink\" title=\"指针没什么特别\"></a>指针没什么特别</h1><p>指针变量并不特殊，因为它与其他变量一样都只是变量而已。它们有一个内存分配和一个值。所有的指针变量，不管它们指向的值是什么类型，大小和表示方式都是一样的。令人困惑的是<code>*</code>字符在代码中充当操作符，用于声明指针类型。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这篇文章描述了指针背后的目的，以及栈和指针机制如何在<code>Go</code>中工作，如果你理解了这种设计的理念与机制，恭喜你，在编写简洁高效代码的的旅途中，你迈出了第一步。</p>\n<p>总之，看到这里，你可以学到许多:</p>\n<ul>\n<li>函数在帧边界范围内执行，帧为每个单独的函数提供单独的内存空间。</li>\n<li>当调用一个函数时，在两个帧之间会产生交互。</li>\n<li><strong>按值</strong>传递数据的好处是可读性。</li>\n<li>栈很重要，因为它为每个单独的函数提供了有边界的物理内存空间。</li>\n<li>活动帧以下的所有栈内存都无效，但活动帧以上的内存是有效的。</li>\n<li>调用函数意味着<code>goroutine</code>需要在堆栈上开辟一段新的内存空间。</li>\n<li>在每次函数调用期间，在获取帧时，该帧的堆栈内存将被清除（覆盖）。</li>\n<li>指针的意义，即与函数共享一个值，以便函数可以读写该值，即使该值并不直接存在于其所在帧中。</li>\n<li>对于由你或语言本身声明的每一种类型，你都可以免费获得用于共享的恭维指针类型。</li>\n<li>指针变量允许在使用它的函数的帧之外间接访问内存。</li>\n<li>指针变量并不特殊，因为它们和其他变量一样都是变量。它们有一个内存分配和一个值。</li>\n</ul>\n<hr>\n<p>版权声明：</p>\n<ol>\n<li><p>任何个人或机构如需转载本文，无须再获得作者书面授权，但是转载者必须保留作者署名，并注明出处。</p>\n</li>\n<li><p>作者保留对本文的修改权。他人未经作者许可，不得擅自修改，破坏作品的完整性。</p>\n</li>\n<li><p>作者保留对本文的其他各项著作权权利。</p>\n</li>\n</ol>\n<p>原文阅读：<br><a href=\"https://www.ardanlabs.com/blog/2017/05/language-mechanics-on-stacks-and-pointers.html\" target=\"_blank\" rel=\"noopener\">Language Mechanics On Stacks And Pointers\n</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>阅读前请悉知：本文是一篇翻译文章，出于对原文的喜爱与敬畏，所以需要强调：如果读者英文阅读能力好，请直接移步文末原文链接；如果对这篇翻译所述知识感兴趣，也请一定要再看下英文原文，加深理解。翻译中为了表达的需要，加入了自己的一些理解，不过因为知识有限，翻译过程难免纰漏，如有问题，欢迎留言指正。</p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>我不想夸赞指针，因为它很难理解，如若使用不当，极易造成bug, 甚至引发性能问题，这在编写并发或者多线程软件时，显的尤为突出。也就难怪许多编程语言都试图对程序员隐藏指针特性了。但是，当使用Go编写软件，你是没有办法避开指针的。如果对指针没有深入的理解，你将很难写出简洁高效的代码。</p>\n<h1 id=\"帧（边界）\"><a href=\"#帧（边界）\" class=\"headerlink\" title=\"帧（边界）\"></a>帧（边界）</h1><p>函数在独立的内存空间（帧）执行，而这个独立的内存空间是有边界的，这个边界我们称之为帧边界。每个帧都允许函数在自己的上下文中运行，并提供流量控制(flow control, 暂且这么翻译)。<br>函数只能直接访问帧内的内存，帧外的内存不能间接访问。如果函数需要访问帧外的存储空间，则该内存必须与函数共享。为了理解接下来的内容，我们需要首先理解帧概念和机制。（我的理解是：帧是一段有限的供函数运行的内存块）</p>\n<p>当一个函数被调用，会有两个帧发生交互, 即：代码从调用函数的帧转换到被调用函数的帧，如果函数调用需要传递数据，那么该数据必须从一个帧传递到另一个帧。在Go中，数据在两帧之间是<strong>按值</strong>传递的。</p>\n<p><strong>按值</strong>传递的提高了代码的可读性。函数调用中数据值从一个函数复制传递，另一个函数接收到这个值，整个过程很直观，所以你写代码时不必为了可读性而特意掩盖函数间交互的过程，因为它就是这么直观，因而这种直观可以帮助你理解每个函数调用是在如何影响程序运行的。</p>\n<h2 id=\"Listing-1\"><a href=\"#Listing-1\" class=\"headerlink\" title=\"Listing 1\"></a>Listing 1</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">01 package main</span><br><span class=\"line\">02</span><br><span class=\"line\">03 func main() &#123;</span><br><span class=\"line\">04</span><br><span class=\"line\">05    // Declare variable of type int with a value of 10.</span><br><span class=\"line\">06    count := 10</span><br><span class=\"line\">07</span><br><span class=\"line\">08    // Display the &quot;value of&quot; and &quot;address of&quot; count.</span><br><span class=\"line\">09    println(&quot;count:\\tValue Of[&quot;, count, &quot;]\\tAddr Of[&quot;, &amp;count, &quot;]&quot;)</span><br><span class=\"line\">10</span><br><span class=\"line\">11    // Pass the &quot;value of&quot; the count.</span><br><span class=\"line\">12    increment(count)</span><br><span class=\"line\">13</span><br><span class=\"line\">14    println(&quot;count:\\tValue Of[&quot;, count, &quot;]\\tAddr Of[&quot;, &amp;count, &quot;]&quot;)</span><br><span class=\"line\">15 &#125;</span><br><span class=\"line\">16</span><br><span class=\"line\">17 //go:noinline</span><br><span class=\"line\">18 func increment(inc int) &#123;</span><br><span class=\"line\">19</span><br><span class=\"line\">20    // Increment the &quot;value of&quot; inc.</span><br><span class=\"line\">21    inc++</span><br><span class=\"line\">22    println(&quot;inc:\\tValue Of[&quot;, inc, &quot;]\\tAddr Of[&quot;, &amp;inc, &quot;]&quot;)</span><br><span class=\"line\">23 &#125;</span><br></pre></td></tr></table></figure>\n<p>当你执行以上代码时，golang中<code>runtime</code>会创建一个主<code>goroutine</code>，这个主<code>goroutine</code>会开始执行所有的<code>main</code>函数内所有代码的初始化。需要明白的是，<code>goroutine</code>是挂在操作系统线程上的，该线程最终在机器的某个核心上执行。在1.8版本中，每个<code>goroutine</code>都有一个初始化大小为2048个字节的连续内存块，这构成了它的堆栈空间。这个初始堆栈大小在过去几年发生了变化，将来可能会再次发生变化。</p>\n<p>栈很重要，因为它为每个单独的函数提供了有限的物理内存空间。在主<code>goroutine</code>执行清单1中的主函数时，<code>goroutine</code>的栈是以下这样</p>\n<h2 id=\"Figure-1\"><a href=\"#Figure-1\" class=\"headerlink\" title=\"Figure 1\"></a>Figure 1</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/44480-b255d954cb7affb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>你可以在图1中看到，栈的一部分已经被主函数所占据，即<code>main</code>所属的内存帧（帧在栈上分配的），这个方框表示栈上的主函数边界。帧的范围作为调用函数时执行的代码的一部分建立。你还可以看到<code>count</code>变量的内存已经放在main所在帧的地址0x10429fa4上。</p>\n<p>图1还说明了另一个有趣的问题。活动帧以下的所有栈内存都无效，但活动帧以上的栈内存是有效的。我需要明确帧的有效部分和无效部分之间的界限（是否有被使用）。</p>\n<h1 id=\"地址\"><a href=\"#地址\" class=\"headerlink\" title=\"地址\"></a>地址</h1><p>变量的作用是特定的内存位置赋予名字，以提高代码的可读性，并帮助你分析正在使用的数据。如果你有一个变量，那么对应内存中一个值，如果内存中有一个值，那么它必须有一个地址。在第09行，主函数调用内置函数println来显示<code>count</code>变量的“值”和“地址”。</p>\n<h2 id=\"Listing-2\"><a href=\"#Listing-2\" class=\"headerlink\" title=\"Listing 2\"></a>Listing 2</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">09    println(&quot;count:\\tValue Of[&quot;, count, &quot;]\\tAddr Of[&quot;, &amp;count, &quot;]&quot;)</span><br></pre></td></tr></table></figure>\n<p>使用&amp;运算符来获取变量位置的地址并不新奇，其它语言也使用这个运算符。第09行的输出应该类似于下面的输出，如果你在一个32位架构(如游乐场)上运行代码:</p>\n<h2 id=\"Listing-3\"><a href=\"#Listing-3\" class=\"headerlink\" title=\"Listing 3\"></a>Listing 3</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count:  Value Of[ 10 ]  Addr Of[ 0x10429fa4 ]</span><br></pre></td></tr></table></figure>\n<h1 id=\"函数调用\"><a href=\"#函数调用\" class=\"headerlink\" title=\"函数调用\"></a>函数调用</h1><p>在第12行上，<code>main</code>函数调用了<code>increment</code>函数。</p>\n<h2 id=\"Listing-4\"><a href=\"#Listing-4\" class=\"headerlink\" title=\"Listing 4\"></a>Listing 4</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">12    increment(count)</span><br></pre></td></tr></table></figure>\n<p>调用函数意味着<code>goroutine</code>需要在栈上开辟一个新的内存空间。然而事情要可能比你想像的还要复杂一些哦。要成功地进行此函数调用，需要在转换过程中在两个帧之间传递数据。具体地说，一个整数值将在调用期间被复制和传递。通过查看第18行上的<code>increment</code>函数的声明，你可以看到这一点。</p>\n<h2 id=\"Listing-5\"><a href=\"#Listing-5\" class=\"headerlink\" title=\"Listing 5\"></a>Listing 5</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">18 func increment(inc int) &#123;</span><br></pre></td></tr></table></figure>\n<p>如果你在第12行再次看到递增的函数调用，你会看到代码正在传递<code>count</code>变量的“值”。该值将被复制、传递给<code>increment</code>函数所在的帧中。记住，<code>increment</code>函数只能在它自己的空间内直接读写内存，因此它需要<code>inc</code>变量接收、存储和访问它自己传递的<code>count</code>值的副本。</p>\n<p>在<code>increment</code>函数内部的代码开始执行之前，<code>goroutine</code>的栈看起来是这样的:<br>Figure 2<br><img src=\"https://upload-images.jianshu.io/upload_images/44480-0c74d10a3c1675b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>可以看到栈上现在有两个帧，一个是<code>main</code>，一个<code>increment</code>。在<code>increment</code>的帧中，你可以看到<code>inc</code>变量，它包含在函数调用期间复制和传递的值10。<code>inc</code>变量的地址是0x10429f98，内存更小，因为帧在栈中是由高地址向低地址扩展的，不过这只是一个实现细节，没有任何意义。重要的是<code>goroutine</code>从<code>main</code>的帧中获取<code>count</code>的值，并使用<code>inc</code>变量在帧中存储了该值的副本。</p>\n<p><code>increment</code>函数中的其余代码显示<code>inc</code>变量的“值”和“地址”。</p>\n<h2 id=\"Listing-6\"><a href=\"#Listing-6\" class=\"headerlink\" title=\"Listing 6\"></a>Listing 6</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">21    inc++</span><br><span class=\"line\">22    println(&quot;inc:\\tValue Of[&quot;, inc, &quot;]\\tAddr Of[&quot;, &amp;inc, &quot;]&quot;)</span><br></pre></td></tr></table></figure>\n<p>22行的输出如下</p>\n<h2 id=\"Listing-7\"><a href=\"#Listing-7\" class=\"headerlink\" title=\"Listing 7\"></a>Listing 7</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inc:    Value Of[ 11 ]  Addr Of[ 0x10429f98 ]</span><br></pre></td></tr></table></figure>\n<p>这是在执行到第22行后栈的样子:</p>\n<h2 id=\"Figure-3\"><a href=\"#Figure-3\" class=\"headerlink\" title=\"Figure 3\"></a>Figure 3</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/44480-03d0709e82b2e9df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>执行第21和22行之后，<code>increment</code>函数返回到<code>main</code>函数。然后主函数在第14行再次<code>count</code>变量的“值”和“地址”。</p>\n<h2 id=\"Listing-8\"><a href=\"#Listing-8\" class=\"headerlink\" title=\"Listing 8\"></a>Listing 8</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">14    println(&quot;count:\\tValue Of[&quot;,count, &quot;]\\tAddr Of[&quot;, &amp;count, &quot;]&quot;)</span><br></pre></td></tr></table></figure>\n<p>输出如下如示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count:  Value Of[ 10 ]  Addr Of[ 0x10429fa4 ]</span><br><span class=\"line\">inc:    Value Of[ 11 ]  Addr Of[ 0x10429f98 ]</span><br><span class=\"line\">count:  Value Of[ 10 ]  Addr Of[ 0x10429fa4 ]</span><br></pre></td></tr></table></figure></p>\n<p><code>main</code>所在帧中<code>count</code>的值在调用<code>increment</code>前后相同。</p>\n<h1 id=\"函数返回\"><a href=\"#函数返回\" class=\"headerlink\" title=\"函数返回\"></a>函数返回</h1><p>当一个函数返回到调用方函数时，栈上的内存实际发生了什么?其实什么都没有。这是<code>increment</code>函数执行完成返回后栈的样子:</p>\n<h2 id=\"Figure-4\"><a href=\"#Figure-4\" class=\"headerlink\" title=\"Figure 4\"></a>Figure 4</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/44480-47c7323bcebfdd41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>与图3几乎完全相同，只是<code>increment</code>函数关联的帧现在被认为是无效内存。这是因为<code>main</code>的帧现在是活动帧。<code>increment</code>函数所在的帧在内存中保持不变，此时它是非活动帧。</p>\n<p>清理返回函数的帧的内存会浪费时间，因为你不知道是否还需要这个内存。所以内存就保持原样了。在每次函数调用期间，在获取帧时，该帧的栈内存将被清除。这是通过初始化放置在帧中的任何值来完成的。因为所有的值都被初始化为至少它们的“零值”，所以栈在每次函数调用时都会自动清理。<br>（这里我理解因为每个帧其实是有边界的，程序运行时知道此时帧的边界在哪里，比如若此时<code>main</code>调用另一个函数<code>increment2</code>,可能会占据原<code>increment</code>的帧，完成初始化，相当于是覆盖了）</p>\n<h1 id=\"共享\"><a href=\"#共享\" class=\"headerlink\" title=\"共享\"></a>共享</h1><p>有什么办法能让<code>increment</code>函数直接操作<code>main</code>的帧中存在的<code>count</code>变量呢?答案是指针。指针的存在只有一个目的，即与函数共享一个值，以便函数可以读写该值，即使该值并不直接存在于其自身的帧中。</p>\n<p>如果你不知道共享，你就不需要使用指针。学习指针时，重要的是要使用清晰的词汇表，而不是操作符或语法。所以请记住，指针是用于共享的，并在你读取代码时将<code>&amp;</code>操作符替换为“共享”。</p>\n<h1 id=\"指针类型\"><a href=\"#指针类型\" class=\"headerlink\" title=\"指针类型\"></a>指针类型</h1><p>Go有许多内置类型， 这些内置类型都能很方便的声明为指针类型。比如已经存在一个名为<code>int</code>的内置类型，因此有一个指针类型称为<code>*int</code>。如果声明了一个名为<code>User</code>的类型，就可以获得一个名为<code>*User</code>的指针类型。</p>\n<p>所有指针类型都具有相同的两个特征。首先，他们从角色*开始。其次，它们都具有相同的内存大小和表示形式，即表示地址的4或8字节。在32位架构上，指针需要4字节的内存，而在64位架构(如你的机器)上，它们需要8字节的内存。</p>\n<h1 id=\"间接访问内存\"><a href=\"#间接访问内存\" class=\"headerlink\" title=\"间接访问内存\"></a>间接访问内存</h1><p>看看这个小程序，它执行一个函数调用，通过<strong>按值</strong>传递地址。这将与<code>increment</code>函数共享<code>main</code>的帧中的<code>count</code>变量</p>\n<h2 id=\"Listing-10\"><a href=\"#Listing-10\" class=\"headerlink\" title=\"Listing 10\"></a>Listing 10</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">01 package main</span><br><span class=\"line\">02</span><br><span class=\"line\">03 func main() &#123;</span><br><span class=\"line\">04</span><br><span class=\"line\">05    // Declare variable of type int with a value of 10.</span><br><span class=\"line\">06    count := 10</span><br><span class=\"line\">07</span><br><span class=\"line\">08    // Display the &quot;value of&quot; and &quot;address of&quot; count.</span><br><span class=\"line\">09    println(&quot;count:\\tValue Of[&quot;, count, &quot;]\\t\\tAddr Of[&quot;, &amp;count, &quot;]&quot;)</span><br><span class=\"line\">10</span><br><span class=\"line\">11    // Pass the &quot;address of&quot; count.</span><br><span class=\"line\">12    increment(&amp;count)</span><br><span class=\"line\">13</span><br><span class=\"line\">14    println(&quot;count:\\tValue Of[&quot;, count, &quot;]\\t\\tAddr Of[&quot;, &amp;count, &quot;]&quot;)</span><br><span class=\"line\">15 &#125;</span><br><span class=\"line\">16</span><br><span class=\"line\">17 //go:noinline</span><br><span class=\"line\">18 func increment(inc *int) &#123;</span><br><span class=\"line\">19</span><br><span class=\"line\">20    // Increment the &quot;value of&quot; count that the &quot;pointer points to&quot;. (dereferencing)</span><br><span class=\"line\">21    *inc++</span><br><span class=\"line\">22    println(&quot;inc:\\tValue Of[&quot;, inc, &quot;]\\tAddr Of[&quot;, &amp;inc, &quot;]\\tValue Points To[&quot;, *inc, &quot;]&quot;)</span><br><span class=\"line\">23 &#125;</span><br></pre></td></tr></table></figure>\n<p>从最初的程序中，有三个有趣的变化。这是第12行上的第一个变化</p>\n<h2 id=\"Listing-11\"><a href=\"#Listing-11\" class=\"headerlink\" title=\"Listing 11\"></a>Listing 11</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">12    increment(&amp;count)</span><br></pre></td></tr></table></figure>\n<p>这一次在第12行，代码不是复制和传递计数的“值”，而是传递计数的“地址”。现在你可以说，我正在与<code>increment</code>函数“共享”<code>count</code>变量。这就是<code>&amp;</code>操作符功能：“共享”。</p>\n<p>请理解这仍然是一个“按值传递”，唯一的区别是你传递的值是一个地址而不是整数。地址也是值; 这是正在复制并通过帧传递给函数调用者的内容。</p>\n<p>由于正在复制和传递地址的值，因此需要在<code>increment</code>帧内设置一个变量来接收和存储这个整数的地址。这就是整型指针变量的声明在第18行出现的地方。</p>\n<h2 id=\"Listing-12\"><a href=\"#Listing-12\" class=\"headerlink\" title=\"Listing 12\"></a>Listing 12</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">18 func increment(inc *int) &#123;</span><br></pre></td></tr></table></figure>\n<p>如果要传递<code>User</code>值的地址，则需要将变量声明为<code>*User</code>。即使所有指针变量都存储地址值，它们也不能传递任何地址，只能传递与指针类型关联的地址。这是关键，共享一个值的原因是因为接收函数需要对该值执行读写操作。你需要任何值的类型信息才能对其进行读写。编译器将确保只有与正确指针类型关联的值与该函数共享。</p>\n<p>这是函数调用increment后栈的样子:</p>\n<h2 id=\"Figure-5\"><a href=\"#Figure-5\" class=\"headerlink\" title=\"Figure 5\"></a>Figure 5</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/44480-61d79b5c0754f31b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>在图5中可以看到，当使用地址作为值执行“传递值”时，栈是什么样子的。<code>increment</code>函数帧的指针变量现在指向<code>count</code>变量，它位于<code>main</code>所在的帧内。</p>\n<p>现在使用指针变量，函数可以对<code>main</code>帧内的<code>count</code>变量执行间接的读修改写操作。</p>\n<h2 id=\"Listing-13\"><a href=\"#Listing-13\" class=\"headerlink\" title=\"Listing 13\"></a>Listing 13</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">21    *inc++</span><br></pre></td></tr></table></figure>\n<p>这一次，<em>字符充当操作符并应用于指针变量。使用</em>作为运算符意味着，“指针指向的值”。指针变量允许在使用它的函数帧之外间接访问内存。有时这种间接的读或写被称为取消指针引用。<code>increment</code>函数在它的帧内仍然必须有一个指针变量，它可以直接读取来执行间接访问。</p>\n<p>现在，在图6中，你可以看到第21行执行之后的栈是什么样子的。</p>\n<h2 id=\"Figure-6\"><a href=\"#Figure-6\" class=\"headerlink\" title=\"Figure 6\"></a>Figure 6</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/44480-c5bcd92c558e97a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>以下是输出数据</p>\n<h2 id=\"Listing-14\"><a href=\"#Listing-14\" class=\"headerlink\" title=\"Listing 14\"></a>Listing 14</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count:  Value Of[ 10 ]   \t   \tAddr Of[ 0x10429fa4 ]</span><br><span class=\"line\">inc:    Value Of[ 0x10429fa4 ]  Addr Of[ 0x10429f98 ]   Value Points To[ 11 ]</span><br><span class=\"line\">count:  Value Of[ 11 ]   \t   \tAddr Of[ 0x10429fa4 ]</span><br></pre></td></tr></table></figure>\n<p>你可以看到，<code>inc</code>指针变量的“值”与计数变量的“地址”相同。这样就建立了共享关系，允许对帧之外的内存进行间接访问。当<code>increment</code>函数通过指针执行写操作时，<code>main</code>函数会在返回时看到更改。</p>\n<h1 id=\"指针没什么特别\"><a href=\"#指针没什么特别\" class=\"headerlink\" title=\"指针没什么特别\"></a>指针没什么特别</h1><p>指针变量并不特殊，因为它与其他变量一样都只是变量而已。它们有一个内存分配和一个值。所有的指针变量，不管它们指向的值是什么类型，大小和表示方式都是一样的。令人困惑的是<code>*</code>字符在代码中充当操作符，用于声明指针类型。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这篇文章描述了指针背后的目的，以及栈和指针机制如何在<code>Go</code>中工作，如果你理解了这种设计的理念与机制，恭喜你，在编写简洁高效代码的的旅途中，你迈出了第一步。</p>\n<p>总之，看到这里，你可以学到许多:</p>\n<ul>\n<li>函数在帧边界范围内执行，帧为每个单独的函数提供单独的内存空间。</li>\n<li>当调用一个函数时，在两个帧之间会产生交互。</li>\n<li><strong>按值</strong>传递数据的好处是可读性。</li>\n<li>栈很重要，因为它为每个单独的函数提供了有边界的物理内存空间。</li>\n<li>活动帧以下的所有栈内存都无效，但活动帧以上的内存是有效的。</li>\n<li>调用函数意味着<code>goroutine</code>需要在堆栈上开辟一段新的内存空间。</li>\n<li>在每次函数调用期间，在获取帧时，该帧的堆栈内存将被清除（覆盖）。</li>\n<li>指针的意义，即与函数共享一个值，以便函数可以读写该值，即使该值并不直接存在于其所在帧中。</li>\n<li>对于由你或语言本身声明的每一种类型，你都可以免费获得用于共享的恭维指针类型。</li>\n<li>指针变量允许在使用它的函数的帧之外间接访问内存。</li>\n<li>指针变量并不特殊，因为它们和其他变量一样都是变量。它们有一个内存分配和一个值。</li>\n</ul>\n<hr>\n<p>版权声明：</p>\n<ol>\n<li><p>任何个人或机构如需转载本文，无须再获得作者书面授权，但是转载者必须保留作者署名，并注明出处。</p>\n</li>\n<li><p>作者保留对本文的修改权。他人未经作者许可，不得擅自修改，破坏作品的完整性。</p>\n</li>\n<li><p>作者保留对本文的其他各项著作权权利。</p>\n</li>\n</ol>\n<p>原文阅读：<br><a href=\"https://www.ardanlabs.com/blog/2017/05/language-mechanics-on-stacks-and-pointers.html\" target=\"_blank\" rel=\"noopener\">Language Mechanics On Stacks And Pointers\n</a></p>\n"},{"title":"我是如何开始参与开源项目的","date":"2017-07-25T11:44:35.000Z","_content":"\n五年以前，我就注册了{% link github https://github.com/ %}帐号，那时觉得很新奇，有那么多人在这个社区里面分享自己的代码，有那多么人看别人的代码，修别人的`Bug`，提`PR`，彼时，技术有限，根本无力参与。\n\n等到工作后，意识到要提升自己的技能，应该多写代码，多参与开源事业，于是自己开了几个渣渣项目练手，放到{% link github https://github.com/ %}上，借此安慰自己，我也参与了开源。于是既不更新代码，也不进行`review`，就放在那里，也无人问津，如一潭死水，再也激不起一点点涟漪...\n\n去年底换了工作，加入了新团队，因业务的需要，团队开发了一套新的框架{% link gin-swagger https://github.com/morlay/gin-swagger %}，既加快了开发流程，减少了开发负担，简直妙不可言，作为使用者的我，头一次觉得写代码这么舒服，轻松，在使用的过程中，我发现一了个很小很小的需求，于是利用一个休息日，小心翼翼的测试后，就提了`PR`。就这样代码被合并了，长吁了一口气（还好没那么烂）。自己的第一次就这么献出去了...\n\n有了第一次，就知道如何给开源项目提代码了，算是有了小小的经验。\n\n接着因为业务的需求，要写支付宝的接口，因为开发语言是{% link golang https://golang.org/ %}，支付宝官方还没有相应的`SDK`，于是抱着试试看的态度上{% link github https://github.com/ %}搜索，还真找到{% link AliPay SDK for Golang https://github.com/smartwalle/alipay%}，以此为蓝本，结合自己的业务开发，节省了不少时间，也发现了这个项目的一些小小缺点，比如，比如代码格式不规范、功能性瑕疵、测试用例不全等等，在码代码的过程中，发现的这些问题，我都一一给作者提了`PR`，之后这些`PR`被合并到了主分支。就这样，一来二去，我和作者逐渐熟络起来，还加了微信，成了朋友，这感觉真的挺好。\n\n但是，影响我最深的，还是给{% link TiDB https://github.com/pingcap/tidb %}提代码。\n\n事情是这样的，偶然得知一个活动{% link 为 TiDB 重构 built-in 函数 https://zhuanlan.zhihu.com/p/27528657%}（其实一直有关注{% link TiDB https://github.com/pingcap/tidb %}，因为国内做开源的公司并不多，在世界范围内有影响力的就更少了），说是十分钟，但我这个榆木疙瘩楞是费了1天方才看明白需求及整个流程。确定目标后，就开工了，挑了一个简单的上手，写功能，补测试用例，调格式，跑测试流程，真的比自己工作时写的代码还认真，还考究（这样说会不会被老大打哟），终于，在一个月圆之夜，按照{% link TiDB的CONTRIBUTING说明       https://sourcegraph.com/github.com/pingcap/tidb/-/blob/CONTRIBUTING.md %}，我提交了自己的代码，惴惴不安，像一个考前没准备好的学生，交卷后期盼着惊喜。终于，我的代码有人`review`了，还建议我修改不规范的注释，代码本身并无大碍，我很庆幸，没有被喷，于是欣然改了注释，提交，代码被合并，为这么好的开源项目贡献自己的力量，好开心，依葫芦画瓢，又提了两个`PR`，都补合并了。就这样成了为{% link TiDB https://github.com/pingcap/tidb %}的`CONTRIBUTOR`，还收到{% link TiDB https://github.com/pingcap/tidb %}寄来的杯子和贴纸还有明信片，明信片上有手写的字\n{% blockquote %}\n一切特立独行的人格，都意味着强大。\n欢迎来到TiDB Contributor Club\n{% endblockquote %}\n这句话真的很好，很有感染力，也影响了我很长时间。\n","source":"_posts/我是如何开始参与开源项目的.md","raw":"---\ntitle: 我是如何开始参与开源项目的\ndate: 2017-07-25 19:44:35\n---\n\n五年以前，我就注册了{% link github https://github.com/ %}帐号，那时觉得很新奇，有那么多人在这个社区里面分享自己的代码，有那多么人看别人的代码，修别人的`Bug`，提`PR`，彼时，技术有限，根本无力参与。\n\n等到工作后，意识到要提升自己的技能，应该多写代码，多参与开源事业，于是自己开了几个渣渣项目练手，放到{% link github https://github.com/ %}上，借此安慰自己，我也参与了开源。于是既不更新代码，也不进行`review`，就放在那里，也无人问津，如一潭死水，再也激不起一点点涟漪...\n\n去年底换了工作，加入了新团队，因业务的需要，团队开发了一套新的框架{% link gin-swagger https://github.com/morlay/gin-swagger %}，既加快了开发流程，减少了开发负担，简直妙不可言，作为使用者的我，头一次觉得写代码这么舒服，轻松，在使用的过程中，我发现一了个很小很小的需求，于是利用一个休息日，小心翼翼的测试后，就提了`PR`。就这样代码被合并了，长吁了一口气（还好没那么烂）。自己的第一次就这么献出去了...\n\n有了第一次，就知道如何给开源项目提代码了，算是有了小小的经验。\n\n接着因为业务的需求，要写支付宝的接口，因为开发语言是{% link golang https://golang.org/ %}，支付宝官方还没有相应的`SDK`，于是抱着试试看的态度上{% link github https://github.com/ %}搜索，还真找到{% link AliPay SDK for Golang https://github.com/smartwalle/alipay%}，以此为蓝本，结合自己的业务开发，节省了不少时间，也发现了这个项目的一些小小缺点，比如，比如代码格式不规范、功能性瑕疵、测试用例不全等等，在码代码的过程中，发现的这些问题，我都一一给作者提了`PR`，之后这些`PR`被合并到了主分支。就这样，一来二去，我和作者逐渐熟络起来，还加了微信，成了朋友，这感觉真的挺好。\n\n但是，影响我最深的，还是给{% link TiDB https://github.com/pingcap/tidb %}提代码。\n\n事情是这样的，偶然得知一个活动{% link 为 TiDB 重构 built-in 函数 https://zhuanlan.zhihu.com/p/27528657%}（其实一直有关注{% link TiDB https://github.com/pingcap/tidb %}，因为国内做开源的公司并不多，在世界范围内有影响力的就更少了），说是十分钟，但我这个榆木疙瘩楞是费了1天方才看明白需求及整个流程。确定目标后，就开工了，挑了一个简单的上手，写功能，补测试用例，调格式，跑测试流程，真的比自己工作时写的代码还认真，还考究（这样说会不会被老大打哟），终于，在一个月圆之夜，按照{% link TiDB的CONTRIBUTING说明       https://sourcegraph.com/github.com/pingcap/tidb/-/blob/CONTRIBUTING.md %}，我提交了自己的代码，惴惴不安，像一个考前没准备好的学生，交卷后期盼着惊喜。终于，我的代码有人`review`了，还建议我修改不规范的注释，代码本身并无大碍，我很庆幸，没有被喷，于是欣然改了注释，提交，代码被合并，为这么好的开源项目贡献自己的力量，好开心，依葫芦画瓢，又提了两个`PR`，都补合并了。就这样成了为{% link TiDB https://github.com/pingcap/tidb %}的`CONTRIBUTOR`，还收到{% link TiDB https://github.com/pingcap/tidb %}寄来的杯子和贴纸还有明信片，明信片上有手写的字\n{% blockquote %}\n一切特立独行的人格，都意味着强大。\n欢迎来到TiDB Contributor Club\n{% endblockquote %}\n这句话真的很好，很有感染力，也影响了我很长时间。\n","slug":"我是如何开始参与开源项目的","published":1,"updated":"2018-09-18T14:12:39.671Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm8inils0004rwxs7z4s0iq5","content":"<p>五年以前，我就注册了<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github</a>帐号，那时觉得很新奇，有那么多人在这个社区里面分享自己的代码，有那多么人看别人的代码，修别人的<code>Bug</code>，提<code>PR</code>，彼时，技术有限，根本无力参与。</p>\n<p>等到工作后，意识到要提升自己的技能，应该多写代码，多参与开源事业，于是自己开了几个渣渣项目练手，放到<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github</a>上，借此安慰自己，我也参与了开源。于是既不更新代码，也不进行<code>review</code>，就放在那里，也无人问津，如一潭死水，再也激不起一点点涟漪…</p>\n<p>去年底换了工作，加入了新团队，因业务的需要，团队开发了一套新的框架<a href=\"https://github.com/morlay/gin-swagger\" target=\"_blank\" rel=\"noopener\">gin-swagger</a>，既加快了开发流程，减少了开发负担，简直妙不可言，作为使用者的我，头一次觉得写代码这么舒服，轻松，在使用的过程中，我发现一了个很小很小的需求，于是利用一个休息日，小心翼翼的测试后，就提了<code>PR</code>。就这样代码被合并了，长吁了一口气（还好没那么烂）。自己的第一次就这么献出去了…</p>\n<p>有了第一次，就知道如何给开源项目提代码了，算是有了小小的经验。</p>\n<p>接着因为业务的需求，要写支付宝的接口，因为开发语言是<a href=\"https://golang.org/\" target=\"_blank\" rel=\"noopener\">golang</a>，支付宝官方还没有相应的<code>SDK</code>，于是抱着试试看的态度上<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github</a>搜索，还真找到<a href=\"https://github.com/smartwalle/alipay\" target=\"_blank\" rel=\"noopener\">AliPay SDK for Golang</a>，以此为蓝本，结合自己的业务开发，节省了不少时间，也发现了这个项目的一些小小缺点，比如，比如代码格式不规范、功能性瑕疵、测试用例不全等等，在码代码的过程中，发现的这些问题，我都一一给作者提了<code>PR</code>，之后这些<code>PR</code>被合并到了主分支。就这样，一来二去，我和作者逐渐熟络起来，还加了微信，成了朋友，这感觉真的挺好。</p>\n<p>但是，影响我最深的，还是给<a href=\"https://github.com/pingcap/tidb\" target=\"_blank\" rel=\"noopener\">TiDB</a>提代码。</p>\n<p>事情是这样的，偶然得知一个活动<a href=\"https://zhuanlan.zhihu.com/p/27528657\" target=\"_blank\" rel=\"noopener\">为 TiDB 重构 built-in 函数</a>（其实一直有关注<a href=\"https://github.com/pingcap/tidb\" target=\"_blank\" rel=\"noopener\">TiDB</a>，因为国内做开源的公司并不多，在世界范围内有影响力的就更少了），说是十分钟，但我这个榆木疙瘩楞是费了1天方才看明白需求及整个流程。确定目标后，就开工了，挑了一个简单的上手，写功能，补测试用例，调格式，跑测试流程，真的比自己工作时写的代码还认真，还考究（这样说会不会被老大打哟），终于，在一个月圆之夜，按照<a href=\"https://sourcegraph.com/github.com/pingcap/tidb/-/blob/CONTRIBUTING.md\" target=\"_blank\" rel=\"noopener\">TiDB的CONTRIBUTING说明</a>，我提交了自己的代码，惴惴不安，像一个考前没准备好的学生，交卷后期盼着惊喜。终于，我的代码有人<code>review</code>了，还建议我修改不规范的注释，代码本身并无大碍，我很庆幸，没有被喷，于是欣然改了注释，提交，代码被合并，为这么好的开源项目贡献自己的力量，好开心，依葫芦画瓢，又提了两个<code>PR</code>，都补合并了。就这样成了为<a href=\"https://github.com/pingcap/tidb\" target=\"_blank\" rel=\"noopener\">TiDB</a>的<code>CONTRIBUTOR</code>，还收到<a href=\"https://github.com/pingcap/tidb\" target=\"_blank\" rel=\"noopener\">TiDB</a>寄来的杯子和贴纸还有明信片，明信片上有手写的字<br><blockquote><p>一切特立独行的人格，都意味着强大。<br>欢迎来到TiDB Contributor Club</p>\n</blockquote><br>这句话真的很好，很有感染力，也影响了我很长时间。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>五年以前，我就注册了<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github</a>帐号，那时觉得很新奇，有那么多人在这个社区里面分享自己的代码，有那多么人看别人的代码，修别人的<code>Bug</code>，提<code>PR</code>，彼时，技术有限，根本无力参与。</p>\n<p>等到工作后，意识到要提升自己的技能，应该多写代码，多参与开源事业，于是自己开了几个渣渣项目练手，放到<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github</a>上，借此安慰自己，我也参与了开源。于是既不更新代码，也不进行<code>review</code>，就放在那里，也无人问津，如一潭死水，再也激不起一点点涟漪…</p>\n<p>去年底换了工作，加入了新团队，因业务的需要，团队开发了一套新的框架<a href=\"https://github.com/morlay/gin-swagger\" target=\"_blank\" rel=\"noopener\">gin-swagger</a>，既加快了开发流程，减少了开发负担，简直妙不可言，作为使用者的我，头一次觉得写代码这么舒服，轻松，在使用的过程中，我发现一了个很小很小的需求，于是利用一个休息日，小心翼翼的测试后，就提了<code>PR</code>。就这样代码被合并了，长吁了一口气（还好没那么烂）。自己的第一次就这么献出去了…</p>\n<p>有了第一次，就知道如何给开源项目提代码了，算是有了小小的经验。</p>\n<p>接着因为业务的需求，要写支付宝的接口，因为开发语言是<a href=\"https://golang.org/\" target=\"_blank\" rel=\"noopener\">golang</a>，支付宝官方还没有相应的<code>SDK</code>，于是抱着试试看的态度上<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github</a>搜索，还真找到<a href=\"https://github.com/smartwalle/alipay\" target=\"_blank\" rel=\"noopener\">AliPay SDK for Golang</a>，以此为蓝本，结合自己的业务开发，节省了不少时间，也发现了这个项目的一些小小缺点，比如，比如代码格式不规范、功能性瑕疵、测试用例不全等等，在码代码的过程中，发现的这些问题，我都一一给作者提了<code>PR</code>，之后这些<code>PR</code>被合并到了主分支。就这样，一来二去，我和作者逐渐熟络起来，还加了微信，成了朋友，这感觉真的挺好。</p>\n<p>但是，影响我最深的，还是给<a href=\"https://github.com/pingcap/tidb\" target=\"_blank\" rel=\"noopener\">TiDB</a>提代码。</p>\n<p>事情是这样的，偶然得知一个活动<a href=\"https://zhuanlan.zhihu.com/p/27528657\" target=\"_blank\" rel=\"noopener\">为 TiDB 重构 built-in 函数</a>（其实一直有关注<a href=\"https://github.com/pingcap/tidb\" target=\"_blank\" rel=\"noopener\">TiDB</a>，因为国内做开源的公司并不多，在世界范围内有影响力的就更少了），说是十分钟，但我这个榆木疙瘩楞是费了1天方才看明白需求及整个流程。确定目标后，就开工了，挑了一个简单的上手，写功能，补测试用例，调格式，跑测试流程，真的比自己工作时写的代码还认真，还考究（这样说会不会被老大打哟），终于，在一个月圆之夜，按照<a href=\"https://sourcegraph.com/github.com/pingcap/tidb/-/blob/CONTRIBUTING.md\" target=\"_blank\" rel=\"noopener\">TiDB的CONTRIBUTING说明</a>，我提交了自己的代码，惴惴不安，像一个考前没准备好的学生，交卷后期盼着惊喜。终于，我的代码有人<code>review</code>了，还建议我修改不规范的注释，代码本身并无大碍，我很庆幸，没有被喷，于是欣然改了注释，提交，代码被合并，为这么好的开源项目贡献自己的力量，好开心，依葫芦画瓢，又提了两个<code>PR</code>，都补合并了。就这样成了为<a href=\"https://github.com/pingcap/tidb\" target=\"_blank\" rel=\"noopener\">TiDB</a>的<code>CONTRIBUTOR</code>，还收到<a href=\"https://github.com/pingcap/tidb\" target=\"_blank\" rel=\"noopener\">TiDB</a>寄来的杯子和贴纸还有明信片，明信片上有手写的字<br><blockquote><p>一切特立独行的人格，都意味着强大。<br>欢迎来到TiDB Contributor Club</p>\n</blockquote><br>这句话真的很好，很有感染力，也影响了我很长时间。</p>\n"},{"title":"记一次死锁","date":"2017-06-22T12:33:01.000Z","_content":"\n遇到一次死锁，记录一下\n\n一次`select for update`引起的死锁\n\n先来看下表结构：\n\n```sql\n    mysql> show create table tpm \\G;\n    *************************** 1. row ***************************\n        Table: tpm\n    Create Table: CREATE TABLE `tpm` (\n    `id` bigint(64) unsigned NOT NULL AUTO_INCREMENT,\n    `bai` bigint(64) unsigned NOT NULL,\n    `ti` bigint(64) unsigned NOT NULL,\n    `si` bigint(64) unsigned NOT NULL,\n    `ca` bigint(64) NOT NULL,\n    `psn` varchar(64) NOT NULL,\n    `bsti` varchar(32) NOT NULL,\n    `brti` varchar(32) NOT NULL,\n    `state` tinyint(8) unsigned NOT NULL,\n    `pm` tinyint(8) unsigned NOT NULL DEFAULT '4',\n    `create_time` bigint(64) NOT NULL,\n    `update_time` bigint(64) NOT NULL,\n    `enabled` tinyint(8) unsigned NOT NULL DEFAULT '1',\n    `reserve_int_1` int(32) NOT NULL DEFAULT '0',\n    `reserve_int_2` int(32) NOT NULL DEFAULT '0',\n    `reserve_str_1` varchar(64) NOT NULL DEFAULT '',\n    `reserve_str_2` varchar(64) NOT NULL DEFAULT '',\n    PRIMARY KEY (`id`),\n    UNIQUE KEY `I_ain` (`bai`,`psn`,`enabled`),\n    KEY `I_bs` (`bai`,`bsti`),\n    KEY `I_trans_id` (`ti`)\n    ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8\n    1 row in set (0.00 sec)\n```\n\n需求是这样的，查某条记录的状态，若状态为失败，则可插入，若状态为成功，则插入失败，\n假定没有失败的记录，需要插入，则需要执行以下这两条sql（同一个事务里面）\n\n```sql\n    select * from tpm where ti=11  and enabled=1 and state = 1 for update;\n    insert into tpm (`si`,`psn`,`state`,`update_time`,`enabled`,`ca`,`pm`,`create_time`,`bsti`,`brti`,`bai`,`ti`) values(0,'1', 2, 1502807911, 0, 1, 2, 1502807911, 'bsti', 'brti', 0, 2);\n```\n\n其实就是先查询，再插入，在并发量比较高的时时候，会报死锁:\n```\n    [2017-08-21 22:27:04]  [2.76ms]  select * from tpm where ti=11  and enabled=1 and state = 1 for update;\n\n    [2017-08-21 22:27:04]  [1.64ms]  select * from tpm where ti=11  and enabled=1 and state = 1 for update;\n\n    [2017-08-21 22:27:04]  Error 1213: Deadlock found when trying to get lock; try restarting transaction\n\n    [2017-08-21 22:27:04]  [7.89ms]  insert into tpm (`si`,`psn`,`state`,`update_time`,`enabled`,`ca`,`pm`,`create_time`,`bsti`,`brti`,`bai`,`ti`) values(0,'1', 2, 1502807911, 0, 1, 2, 1502807911, 'bsti', 'brti', 0, 2);\n\n    [2017-08-21 22:27:04]  [7.78ms]  insert into tpm (`si`,`psn`,`state`,`update_time`,`enabled`,`ca`,`pm`,`create_time`,`bsti`,`brti`,`bai`,`ti`) values(1,'2', 3, 1502807911, 1, 2, 3, 1502807911, 'bsti', 'brti', 1, 2);\n```\n看了下，是由于`select for update`引起的，\n其实查询语的返回结果是空的\n\n```sql\n    mysql> select * from tpm where ti=11  and enabled=1 and state = 1 for update;\n    Empty set (0.00 sec)\n```\n\n查询为空，插入时遇到死锁了，在并发时会发生这种情况，那这种情况\n根据sql的执行情况，我猜测这次死锁的形成如下图所示\n\n![](/images/sql_deadlock.png)\n\n在并发情况下，红蓝两个请求本来是互不影响的，窃以为蓝方执行`select for update`后，释放了锁，但是红方再次执行`select for update`拿到了锁，如此导致蓝方插入操作失败，造成死锁，当然，这只是我的猜测，按理说，红方执行完`select for update`后，释放了锁，蓝方也能完成事务，但是红方的插入操作却完成不了。\n而且因为查询操作的结果都是空，且查询没有用到主键索引，导致锁住了整张表。\n今天只说现象，原因有待深入分析，以此来认识神秘的数据库锁。","source":"_posts/记一次死锁.md","raw":"---\ntitle: 记一次死锁\ndate: 2017-06-22 20:33:01\n---\n\n遇到一次死锁，记录一下\n\n一次`select for update`引起的死锁\n\n先来看下表结构：\n\n```sql\n    mysql> show create table tpm \\G;\n    *************************** 1. row ***************************\n        Table: tpm\n    Create Table: CREATE TABLE `tpm` (\n    `id` bigint(64) unsigned NOT NULL AUTO_INCREMENT,\n    `bai` bigint(64) unsigned NOT NULL,\n    `ti` bigint(64) unsigned NOT NULL,\n    `si` bigint(64) unsigned NOT NULL,\n    `ca` bigint(64) NOT NULL,\n    `psn` varchar(64) NOT NULL,\n    `bsti` varchar(32) NOT NULL,\n    `brti` varchar(32) NOT NULL,\n    `state` tinyint(8) unsigned NOT NULL,\n    `pm` tinyint(8) unsigned NOT NULL DEFAULT '4',\n    `create_time` bigint(64) NOT NULL,\n    `update_time` bigint(64) NOT NULL,\n    `enabled` tinyint(8) unsigned NOT NULL DEFAULT '1',\n    `reserve_int_1` int(32) NOT NULL DEFAULT '0',\n    `reserve_int_2` int(32) NOT NULL DEFAULT '0',\n    `reserve_str_1` varchar(64) NOT NULL DEFAULT '',\n    `reserve_str_2` varchar(64) NOT NULL DEFAULT '',\n    PRIMARY KEY (`id`),\n    UNIQUE KEY `I_ain` (`bai`,`psn`,`enabled`),\n    KEY `I_bs` (`bai`,`bsti`),\n    KEY `I_trans_id` (`ti`)\n    ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8\n    1 row in set (0.00 sec)\n```\n\n需求是这样的，查某条记录的状态，若状态为失败，则可插入，若状态为成功，则插入失败，\n假定没有失败的记录，需要插入，则需要执行以下这两条sql（同一个事务里面）\n\n```sql\n    select * from tpm where ti=11  and enabled=1 and state = 1 for update;\n    insert into tpm (`si`,`psn`,`state`,`update_time`,`enabled`,`ca`,`pm`,`create_time`,`bsti`,`brti`,`bai`,`ti`) values(0,'1', 2, 1502807911, 0, 1, 2, 1502807911, 'bsti', 'brti', 0, 2);\n```\n\n其实就是先查询，再插入，在并发量比较高的时时候，会报死锁:\n```\n    [2017-08-21 22:27:04]  [2.76ms]  select * from tpm where ti=11  and enabled=1 and state = 1 for update;\n\n    [2017-08-21 22:27:04]  [1.64ms]  select * from tpm where ti=11  and enabled=1 and state = 1 for update;\n\n    [2017-08-21 22:27:04]  Error 1213: Deadlock found when trying to get lock; try restarting transaction\n\n    [2017-08-21 22:27:04]  [7.89ms]  insert into tpm (`si`,`psn`,`state`,`update_time`,`enabled`,`ca`,`pm`,`create_time`,`bsti`,`brti`,`bai`,`ti`) values(0,'1', 2, 1502807911, 0, 1, 2, 1502807911, 'bsti', 'brti', 0, 2);\n\n    [2017-08-21 22:27:04]  [7.78ms]  insert into tpm (`si`,`psn`,`state`,`update_time`,`enabled`,`ca`,`pm`,`create_time`,`bsti`,`brti`,`bai`,`ti`) values(1,'2', 3, 1502807911, 1, 2, 3, 1502807911, 'bsti', 'brti', 1, 2);\n```\n看了下，是由于`select for update`引起的，\n其实查询语的返回结果是空的\n\n```sql\n    mysql> select * from tpm where ti=11  and enabled=1 and state = 1 for update;\n    Empty set (0.00 sec)\n```\n\n查询为空，插入时遇到死锁了，在并发时会发生这种情况，那这种情况\n根据sql的执行情况，我猜测这次死锁的形成如下图所示\n\n![](/images/sql_deadlock.png)\n\n在并发情况下，红蓝两个请求本来是互不影响的，窃以为蓝方执行`select for update`后，释放了锁，但是红方再次执行`select for update`拿到了锁，如此导致蓝方插入操作失败，造成死锁，当然，这只是我的猜测，按理说，红方执行完`select for update`后，释放了锁，蓝方也能完成事务，但是红方的插入操作却完成不了。\n而且因为查询操作的结果都是空，且查询没有用到主键索引，导致锁住了整张表。\n今天只说现象，原因有待深入分析，以此来认识神秘的数据库锁。","slug":"记一次死锁","published":1,"updated":"2018-09-18T14:55:16.514Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm8inilw0005rwxsmd0plobi","content":"<p>遇到一次死锁，记录一下</p>\n<p>一次<code>select for update</code>引起的死锁</p>\n<p>先来看下表结构：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show create table tpm \\G;</span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">    Table: tpm</span><br><span class=\"line\"><span class=\"keyword\">Create</span> <span class=\"keyword\">Table</span>: <span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`tpm`</span> (</span><br><span class=\"line\"><span class=\"string\">`id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">64</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\"><span class=\"string\">`bai`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">64</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\"><span class=\"string\">`ti`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">64</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\"><span class=\"string\">`si`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">64</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\"><span class=\"string\">`ca`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">64</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\"><span class=\"string\">`psn`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\"><span class=\"string\">`bsti`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\"><span class=\"string\">`brti`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\"><span class=\"string\">`state`</span> tinyint(<span class=\"number\">8</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\"><span class=\"string\">`pm`</span> tinyint(<span class=\"number\">8</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'4'</span>,</span><br><span class=\"line\"><span class=\"string\">`create_time`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">64</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\"><span class=\"string\">`update_time`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">64</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\"><span class=\"string\">`enabled`</span> tinyint(<span class=\"number\">8</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'1'</span>,</span><br><span class=\"line\"><span class=\"string\">`reserve_int_1`</span> <span class=\"built_in\">int</span>(<span class=\"number\">32</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0'</span>,</span><br><span class=\"line\"><span class=\"string\">`reserve_int_2`</span> <span class=\"built_in\">int</span>(<span class=\"number\">32</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0'</span>,</span><br><span class=\"line\"><span class=\"string\">`reserve_str_1`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">''</span>,</span><br><span class=\"line\"><span class=\"string\">`reserve_str_2`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">''</span>,</span><br><span class=\"line\">PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>),</span><br><span class=\"line\"><span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">KEY</span> <span class=\"string\">`I_ain`</span> (<span class=\"string\">`bai`</span>,<span class=\"string\">`psn`</span>,<span class=\"string\">`enabled`</span>),</span><br><span class=\"line\"><span class=\"keyword\">KEY</span> <span class=\"string\">`I_bs`</span> (<span class=\"string\">`bai`</span>,<span class=\"string\">`bsti`</span>),</span><br><span class=\"line\"><span class=\"keyword\">KEY</span> <span class=\"string\">`I_trans_id`</span> (<span class=\"string\">`ti`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> AUTO_INCREMENT=<span class=\"number\">1</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">row</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n<p>需求是这样的，查某条记录的状态，若状态为失败，则可插入，若状态为成功，则插入失败，<br>假定没有失败的记录，需要插入，则需要执行以下这两条sql（同一个事务里面）</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> tpm <span class=\"keyword\">where</span> ti=<span class=\"number\">11</span>  <span class=\"keyword\">and</span> enabled=<span class=\"number\">1</span> <span class=\"keyword\">and</span> state = <span class=\"number\">1</span> <span class=\"keyword\">for</span> <span class=\"keyword\">update</span>;</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> tpm (<span class=\"string\">`si`</span>,<span class=\"string\">`psn`</span>,<span class=\"string\">`state`</span>,<span class=\"string\">`update_time`</span>,<span class=\"string\">`enabled`</span>,<span class=\"string\">`ca`</span>,<span class=\"string\">`pm`</span>,<span class=\"string\">`create_time`</span>,<span class=\"string\">`bsti`</span>,<span class=\"string\">`brti`</span>,<span class=\"string\">`bai`</span>,<span class=\"string\">`ti`</span>) <span class=\"keyword\">values</span>(<span class=\"number\">0</span>,<span class=\"string\">'1'</span>, <span class=\"number\">2</span>, <span class=\"number\">1502807911</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1502807911</span>, <span class=\"string\">'bsti'</span>, <span class=\"string\">'brti'</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>其实就是先查询，再插入，在并发量比较高的时时候，会报死锁:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[2017-08-21 22:27:04]  [2.76ms]  select * from tpm where ti=11  and enabled=1 and state = 1 for update;</span><br><span class=\"line\"></span><br><span class=\"line\">[2017-08-21 22:27:04]  [1.64ms]  select * from tpm where ti=11  and enabled=1 and state = 1 for update;</span><br><span class=\"line\"></span><br><span class=\"line\">[2017-08-21 22:27:04]  Error 1213: Deadlock found when trying to get lock; try restarting transaction</span><br><span class=\"line\"></span><br><span class=\"line\">[2017-08-21 22:27:04]  [7.89ms]  insert into tpm (`si`,`psn`,`state`,`update_time`,`enabled`,`ca`,`pm`,`create_time`,`bsti`,`brti`,`bai`,`ti`) values(0,&apos;1&apos;, 2, 1502807911, 0, 1, 2, 1502807911, &apos;bsti&apos;, &apos;brti&apos;, 0, 2);</span><br><span class=\"line\"></span><br><span class=\"line\">[2017-08-21 22:27:04]  [7.78ms]  insert into tpm (`si`,`psn`,`state`,`update_time`,`enabled`,`ca`,`pm`,`create_time`,`bsti`,`brti`,`bai`,`ti`) values(1,&apos;2&apos;, 3, 1502807911, 1, 2, 3, 1502807911, &apos;bsti&apos;, &apos;brti&apos;, 1, 2);</span><br></pre></td></tr></table></figure></p>\n<p>看了下，是由于<code>select for update</code>引起的，<br>其实查询语的返回结果是空的</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from tpm where ti=11  and enabled=1 and state = 1 for update;</span><br><span class=\"line\">Empty <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n<p>查询为空，插入时遇到死锁了，在并发时会发生这种情况，那这种情况<br>根据sql的执行情况，我猜测这次死锁的形成如下图所示</p>\n<p><img src=\"/images/sql_deadlock.png\" alt=\"\"></p>\n<p>在并发情况下，红蓝两个请求本来是互不影响的，窃以为蓝方执行<code>select for update</code>后，释放了锁，但是红方再次执行<code>select for update</code>拿到了锁，如此导致蓝方插入操作失败，造成死锁，当然，这只是我的猜测，按理说，红方执行完<code>select for update</code>后，释放了锁，蓝方也能完成事务，但是红方的插入操作却完成不了。<br>而且因为查询操作的结果都是空，且查询没有用到主键索引，导致锁住了整张表。<br>今天只说现象，原因有待深入分析，以此来认识神秘的数据库锁。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>遇到一次死锁，记录一下</p>\n<p>一次<code>select for update</code>引起的死锁</p>\n<p>先来看下表结构：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show create table tpm \\G;</span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">    Table: tpm</span><br><span class=\"line\"><span class=\"keyword\">Create</span> <span class=\"keyword\">Table</span>: <span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`tpm`</span> (</span><br><span class=\"line\"><span class=\"string\">`id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">64</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\"><span class=\"string\">`bai`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">64</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\"><span class=\"string\">`ti`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">64</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\"><span class=\"string\">`si`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">64</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\"><span class=\"string\">`ca`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">64</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\"><span class=\"string\">`psn`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\"><span class=\"string\">`bsti`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\"><span class=\"string\">`brti`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\"><span class=\"string\">`state`</span> tinyint(<span class=\"number\">8</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\"><span class=\"string\">`pm`</span> tinyint(<span class=\"number\">8</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'4'</span>,</span><br><span class=\"line\"><span class=\"string\">`create_time`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">64</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\"><span class=\"string\">`update_time`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">64</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\"><span class=\"string\">`enabled`</span> tinyint(<span class=\"number\">8</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'1'</span>,</span><br><span class=\"line\"><span class=\"string\">`reserve_int_1`</span> <span class=\"built_in\">int</span>(<span class=\"number\">32</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0'</span>,</span><br><span class=\"line\"><span class=\"string\">`reserve_int_2`</span> <span class=\"built_in\">int</span>(<span class=\"number\">32</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0'</span>,</span><br><span class=\"line\"><span class=\"string\">`reserve_str_1`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">''</span>,</span><br><span class=\"line\"><span class=\"string\">`reserve_str_2`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">''</span>,</span><br><span class=\"line\">PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>),</span><br><span class=\"line\"><span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">KEY</span> <span class=\"string\">`I_ain`</span> (<span class=\"string\">`bai`</span>,<span class=\"string\">`psn`</span>,<span class=\"string\">`enabled`</span>),</span><br><span class=\"line\"><span class=\"keyword\">KEY</span> <span class=\"string\">`I_bs`</span> (<span class=\"string\">`bai`</span>,<span class=\"string\">`bsti`</span>),</span><br><span class=\"line\"><span class=\"keyword\">KEY</span> <span class=\"string\">`I_trans_id`</span> (<span class=\"string\">`ti`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> AUTO_INCREMENT=<span class=\"number\">1</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">row</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n<p>需求是这样的，查某条记录的状态，若状态为失败，则可插入，若状态为成功，则插入失败，<br>假定没有失败的记录，需要插入，则需要执行以下这两条sql（同一个事务里面）</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> tpm <span class=\"keyword\">where</span> ti=<span class=\"number\">11</span>  <span class=\"keyword\">and</span> enabled=<span class=\"number\">1</span> <span class=\"keyword\">and</span> state = <span class=\"number\">1</span> <span class=\"keyword\">for</span> <span class=\"keyword\">update</span>;</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> tpm (<span class=\"string\">`si`</span>,<span class=\"string\">`psn`</span>,<span class=\"string\">`state`</span>,<span class=\"string\">`update_time`</span>,<span class=\"string\">`enabled`</span>,<span class=\"string\">`ca`</span>,<span class=\"string\">`pm`</span>,<span class=\"string\">`create_time`</span>,<span class=\"string\">`bsti`</span>,<span class=\"string\">`brti`</span>,<span class=\"string\">`bai`</span>,<span class=\"string\">`ti`</span>) <span class=\"keyword\">values</span>(<span class=\"number\">0</span>,<span class=\"string\">'1'</span>, <span class=\"number\">2</span>, <span class=\"number\">1502807911</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1502807911</span>, <span class=\"string\">'bsti'</span>, <span class=\"string\">'brti'</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>其实就是先查询，再插入，在并发量比较高的时时候，会报死锁:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[2017-08-21 22:27:04]  [2.76ms]  select * from tpm where ti=11  and enabled=1 and state = 1 for update;</span><br><span class=\"line\"></span><br><span class=\"line\">[2017-08-21 22:27:04]  [1.64ms]  select * from tpm where ti=11  and enabled=1 and state = 1 for update;</span><br><span class=\"line\"></span><br><span class=\"line\">[2017-08-21 22:27:04]  Error 1213: Deadlock found when trying to get lock; try restarting transaction</span><br><span class=\"line\"></span><br><span class=\"line\">[2017-08-21 22:27:04]  [7.89ms]  insert into tpm (`si`,`psn`,`state`,`update_time`,`enabled`,`ca`,`pm`,`create_time`,`bsti`,`brti`,`bai`,`ti`) values(0,&apos;1&apos;, 2, 1502807911, 0, 1, 2, 1502807911, &apos;bsti&apos;, &apos;brti&apos;, 0, 2);</span><br><span class=\"line\"></span><br><span class=\"line\">[2017-08-21 22:27:04]  [7.78ms]  insert into tpm (`si`,`psn`,`state`,`update_time`,`enabled`,`ca`,`pm`,`create_time`,`bsti`,`brti`,`bai`,`ti`) values(1,&apos;2&apos;, 3, 1502807911, 1, 2, 3, 1502807911, &apos;bsti&apos;, &apos;brti&apos;, 1, 2);</span><br></pre></td></tr></table></figure></p>\n<p>看了下，是由于<code>select for update</code>引起的，<br>其实查询语的返回结果是空的</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from tpm where ti=11  and enabled=1 and state = 1 for update;</span><br><span class=\"line\">Empty <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n<p>查询为空，插入时遇到死锁了，在并发时会发生这种情况，那这种情况<br>根据sql的执行情况，我猜测这次死锁的形成如下图所示</p>\n<p><img src=\"/images/sql_deadlock.png\" alt=\"\"></p>\n<p>在并发情况下，红蓝两个请求本来是互不影响的，窃以为蓝方执行<code>select for update</code>后，释放了锁，但是红方再次执行<code>select for update</code>拿到了锁，如此导致蓝方插入操作失败，造成死锁，当然，这只是我的猜测，按理说，红方执行完<code>select for update</code>后，释放了锁，蓝方也能完成事务，但是红方的插入操作却完成不了。<br>而且因为查询操作的结果都是空，且查询没有用到主键索引，导致锁住了整张表。<br>今天只说现象，原因有待深入分析，以此来认识神秘的数据库锁。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}